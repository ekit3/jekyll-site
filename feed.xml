<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.7">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2023-11-23T02:10:59-06:00</updated><id>/feed.xml</id><title type="html">Blog | Tech</title><subtitle>Welcome To the Ekite's Tech Blogs.</subtitle><entry><title type="html">Feature Flipping</title><link href="/articles/architecture/feature-flipping/" rel="alternate" type="text/html" title="Feature Flipping" /><published>2023-07-27T02:00:00-05:00</published><updated>2023-07-27T02:00:00-05:00</updated><id>/articles/architecture/feature-flipping</id><content type="html" xml:base="/articles/architecture/feature-flipping/">&lt;h5 id=&quot;introduction&quot;&gt;Introduction&lt;/h5&gt;

&lt;p&gt;Ici nous allons parler de Feature Flipping, (que vous pouvez aussi connaitre sous le nom de Feature Toggles, Feature Switches, Feature Flag et bien d’autres encore), qui a pour principe de donner la possibilité de contrôler l’accès à des fonctionnalités de vos applications.&lt;/p&gt;

&lt;p&gt;Cette technique devient pertinente lorsque que par exemple, nous voulons mettre en place des fonctionnalités destinées à un public cible (beta user, premium user …), que nous souhaitons avoir plus de contrôle sur l’ensemble des services proposés par une application (possibilité de désactiver telle ou telle fonctionnalité pour maintenance, évolution, correctifs).&lt;/p&gt;

&lt;p&gt;Cette méthodologie peut être implémentée dans différents langage et de manière différente, cela va être à vous de choisir ce qui correspond le mieux à votre besoin. 
Il existe déjà des librairies, des Frameworks, et même des solutions SaaS pour répondre à ce besoin.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/articles/architecture/feature-flipping//intro.jpg&quot; alt=&quot;image&quot; /&gt; &lt;br /&gt;
&lt;!--END_SUMMARY--&gt;&lt;/p&gt;

&lt;h2 id=&quot;quel-intérêt-pour-la-technique-&quot;&gt;Quel intérêt pour la technique ?&lt;/h2&gt;

&lt;h3 id=&quot;cycle-de-vie-de-livraison-dapplication&quot;&gt;Cycle de vie de livraison d’application&lt;/h3&gt;

&lt;p&gt;Le Feature Flipping apporte beaucoup de souplesse dans le cycle de vie d’une application et ce à plusieurs niveaux.&lt;/p&gt;

&lt;p&gt;D’abord l’équipe de développement va pouvoir désactiver tout ou partie du code source d’une ou de plusieurs features. Une feature non finalisée ou qu’on ne souhaite pas activer ne bloquera pas le déploiement d’une release complète. Ce qui ajoute énormément de liberté à l’équipe de développement dans ses réalisations.&lt;/p&gt;

&lt;p&gt;Ces features pourront être activées dans un second temps et n’empêchent donc pas le bon fonctionnement du processus de déploiement continu d’une application.&lt;/p&gt;

&lt;h3 id=&quot;graceful-degradation--progressive-enhancement--fr-dégradation-gracieuse--amélioration-progressive&quot;&gt;Graceful degradation &amp;amp; Progressive enhancement ( fr: Dégradation gracieuse &amp;amp; Amélioration progressive)&lt;/h3&gt;

&lt;p&gt;Cela permet aussi, lorsqu’on identifie un problème sur une fonctionnalité, de pouvoir la désactiver sans avoir besoin de déployer une nouvelle release. L’activation et la désactivation d’une feature peut se faire distinctement du déploiement d’une release. Imaginons que votre parcours de vente soit complétement bloqué à cause d’une étape facultative, la désactiver rendra le service à vos utilisateurs&lt;/p&gt;

&lt;p&gt;On peut également faire du déploiement “progressif” de fonctionnalités. C’est à dire, n’autoriser l’accès qu’à une poignée d’utilisateurs de l’application. Ainsi, cela permet à l’équipe de s’assurer de la pertinence d’une fonctionnalité avant un déploiement complet à l’ensemble des utilisateurs, et aussi potentiellement détecter des anomalies niveau applicatif ou infrastructure, qui n’avaient pas été anticipées.&lt;/p&gt;

&lt;h2 id=&quot;quel-intérêt-pour-le-métier-&quot;&gt;Quel intérêt pour le Métier ?&lt;/h2&gt;

&lt;h3 id=&quot;tests-ab&quot;&gt;Tests A/B&lt;/h3&gt;

&lt;p&gt;Dans l’agilité, nous parlons souvent du principe de l’empirisme. Ce principe se résume grosso-modo à l’apprentissage par l’expérience. L’A/B testing en est un bel exemple. Il permet de proposer des parcours différents de façon aléatoire afin de récolter des datas sur l’utilisation de l’application, et donc, de comprendre comment les utilisateurs l’utilisent en réalité.&lt;/p&gt;

&lt;p&gt;La mise en place de campagnes de test “A/B testing” est simple à comprendre, il permet de donner l’accès à différents parcours utilisateurs sur une même fonctionnalité ou encore de modifier graphiquement l’application pour avoir différents retours selon son utilisation. Ainsi, grâce aux données récoltées lors des campagnes de test, nous allons pouvoir valider une ou plusieurs hypothèses sur l’utilisation d’une ou de plusieurs fonctionnalités.&lt;/p&gt;

&lt;p&gt;Nous avons donc appris par l’expérience des utilisateurs que l’application devra s’orienter vers la version définitive d’une fonctionnalité qui correspond mieux aux besoins utilisateurs.&lt;/p&gt;

&lt;h3 id=&quot;fonctionnalités-temporaires--payantes&quot;&gt;Fonctionnalités temporaires &amp;amp; Payantes&lt;/h3&gt;

&lt;p&gt;Le feature flipping permet également de pouvoir activer des fonctionnalités uniquement lors de périodes spécifiques. Comme par exemple, un jeu ou un affichage spécifique pour la période de Noël, qu’on pourra désactiver une fois les fêtes terminées. 
Des modules activés uniquement en période de soldes, ou même des campagnes réservées aux premiers utilisateurs qui accéderons a la fonctionnalité. 
On peut également rapidement mettre en place un système pour gérer des fonctionnalités payantes de la même manière que pour les features temporaire, juste en changeant les critères de sélection.&lt;/p&gt;

&lt;h2 id=&quot;comment-implémenter&quot;&gt;Comment implémenter&lt;/h2&gt;

&lt;p&gt;Il existe un &lt;a href=&quot;https://featureflags.io/&quot;&gt;site web&lt;/a&gt; qui rassemble énormément de ressources autour de ce sujet, des guides, mais aussi une liste de librairies/SDKs. En le parcourant, nous nous rendons compte qu’il existe beaucoup de façons différentes de l’implémenter.&lt;/p&gt;

&lt;p&gt;Il existe plusieurs frameworks disponibles, parfois pour plusieurs langages de développement, nous pouvons retrouver par exemple, FF4J pour Java, FFLIP pour nodeJS ou encore Toggle pour Golang.&lt;/p&gt;

&lt;p&gt;On peut également retrouver des solutions Saas qui vont vous permettre via un SDK, (et bien sûr moyennant finance 😊), d’implémenter du feature flipping dans votre code, c’est le cas par exemple de launchdarkly, qui a un sdk disponible pour quasiment tous les langages du marché.&lt;/p&gt;

&lt;p&gt;Le plus intéressant serait peut-être de créer une solution maison, mais cela demanderait pas mal d’effort, et pourrait devenir vite complexe à gérer pour les différents langages qu’on peut utiliser. Cependant ! Il existe une solution open source, que vous pouvez déployer, via du conteneur dans votre infrastructure, compatible avec les langages les plus communs, il s’agit de Unleash qui apprait comme étant une solution très attrayante ! Mettant à disposition facilement une plateforme de gestion des features, facile à déployer et à maintenir, vous laissant également la possibilité d’y implémenter des fonctionnalités propres à vos besoin, compatible avec la plupart des langages, que demander de mieux !&lt;/p&gt;

&lt;h2 id=&quot;quelques-tests-pour-se-faire-un-avis&quot;&gt;Quelques tests pour se faire un avis&lt;/h2&gt;

&lt;p&gt;Pour tester rapidement, nous avons décidé de fabriquer une application web, développée en React, qui ferait appel à deux APIs différentes, une développée en NestJS, l’autre en Java Spring, pour justement activer ou non des features.&lt;/p&gt;

&lt;p&gt;Côté React nous avons utilisé &lt;a href=&quot;https://github.com/paralleldrive/react-feature-toggles/&quot;&gt;React Feature Toggles&lt;/a&gt;, l’implémentation du feature flipping est assez simple coté front. Nous récupérons la liste des features et en fonction de leur disponibilité : les composants relatifs à ces features sont activés/chargés.&lt;/p&gt;

&lt;p&gt;Pour l’API Nestjs, nous avons utilisé &lt;a href=&quot;https://github.com/FredKSchott/fflip&quot;&gt;FFLIP&lt;/a&gt;, plutôt simple à mettre en place, qui fonctionne avec un principe de critères qui peuvent être définis, calculés et cumulés, qui donnent accès à une ou plusieurs features. La simplicité d’utilisation et de compréhension permet une mutualisation rapide du code et le tout sans coût supplémentaire, contrairement à d’autres solutions Saas.&lt;/p&gt;

&lt;p&gt;Exemple d’un critère&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;nl&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;isPaidUser&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
    &lt;span class=&quot;nx&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isPaid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isPaid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isPaid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Exemple d’une feature&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;nl&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;newFeatureRollout&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
    &lt;span class=&quot;c1&quot;&gt;// Si la feature est associée à une liste de critère, tous les critères doivent être évalués à vrai pour rendre accessible la feature à l’utilisateur &lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;criteria&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; 
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;isPaidUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; 
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;percentageOfUsers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; 
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;allowUserIDs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AllowEdIds&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; 
    &lt;span class=&quot;nx&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Exemple utilisation simple&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fflip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;fflip&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 

 &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Bob&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;isPaid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;scrum&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;canDrinkBeer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; 

&lt;span class=&quot;nx&quot;&gt;fflip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;criteria&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Criteria&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Une liste de critères comme définie plus haut &lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Une liste de feature comme définie plus haut &lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt; 

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fflip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getFeaturesForUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]));&lt;/span&gt; 

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;listName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fflip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isFeatureEnabledForUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;canDrinkBeer&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Welcome to the Closed Beta!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; can go drink some beer!\n`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Pour finir, avec l’API Spring, nous avons essayé de mettre en place un système maison, afin de vérifier la possibilité de se passer de librairie ou solution tierce. Et le résultat est plutôt concluant, nous avons des résultats similaires entre les 2 APIs.&lt;/p&gt;

&lt;p&gt;Très grossièrement, pour imager à quoi ressemble un bout de code qui utilise du Feature Flipping, nous pourrions le résumer à un ensemble de “if”.&lt;/p&gt;

&lt;p&gt;Type implémentation simple&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    if Feature.is_enabled(‘new_feature’) 
        # new feature 
    else 
        # other 
    End 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Le Feature Flipping consiste à activer ou désactiver une fonctionnalité en fonction d’une variable, dynamiquement dans le code.&lt;/p&gt;

&lt;p&gt;Mais vous vous rendrez compte que c’est un peu plus complexe que cela, si vous le souhaitez, vous pouvez retrouver nos essais &lt;a href=&quot;https://github.com/ekit3/feature-flipping&quot;&gt;ici&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Au final il nous restait un bon nombre de librairies sur différentes technologies à tester, la liste étant longue, peu importe les affinités que vous avez dans les langages de développement vous trouverez de quoi essayer et pourquoi pas le mettre en place&lt;/p&gt;

&lt;h2 id=&quot;limites&quot;&gt;Limites&lt;/h2&gt;

&lt;h3 id=&quot;multiplications-des-cas-de-tests&quot;&gt;Multiplications des cas de tests&lt;/h3&gt;

&lt;p&gt;Ce type de développement implique une grande rigueur quant au suivi et à la mise en place des tests autour de l’application. La multiplication des scénarios de tests et des différents parcours utilisateurs peut être une source de complication si le Feature Flipping n’est pas suivi ni appliqué correctement. Une grande rigueur est nécessaire de la part de toute l’équipe de développement.&lt;/p&gt;

&lt;h3 id=&quot;changement-modèle-de-données&quot;&gt;Changement modèle de données&lt;/h3&gt;

&lt;p&gt;Il ne faut pas oublier non plus que certaines modifications de fonctionnalités peuvent impliquer des impacts sur le modèle de données de l’application, ce qui peut rendre compliqué la cohabitation de plusieurs features.&lt;/p&gt;

&lt;p&gt;Le métier ne demandera pas le feature flipping pour les mêmes raisons (activation des features en fonctions des périodes, des profils utilisateurs) que le développement (faciliter le développement, le déploiement et rendre dispo la feature une fois terminée et testée)&lt;/p&gt;

&lt;p&gt;Alors, dans quelle mesure et jusqu’où peut-on aller avec le Feature Flipping ?&lt;/p&gt;

&lt;h3 id=&quot;quelques-conseils&quot;&gt;Quelques conseils&lt;/h3&gt;

&lt;p&gt;Si vous deviez mettre en place le Feature Flipping, un premier conseil serait de le faire dès le début de vos projets ou de l’intégrer sur des nouvelles fonctionnalités indépendantes, cela peut représenter un gros travail de reprendre un système déjà en place.&lt;/p&gt;

&lt;p&gt;Il vous faudra également beaucoup de liant entre les équipes de développement, la qualité et le métier afin garantir une application parfaitement fonctionnelle de bout en bout. 
Mais ces efforts en valent la peine, vous n’aurez plus à attendre les tests de telle ou telle feature pour déployer, vous pourrez interagir plus facilement avec vos utilisateurs et mieux réagir en cas de problèmes.&lt;/p&gt;</content><author><name>[&quot;yohann_gueguin&quot;, &quot;maxime_montagne&quot;, &quot;jean_dusenne&quot;]</name></author><category term="Architecture" /><summary type="html">Introduction Ici nous allons parler de Feature Flipping, (que vous pouvez aussi connaitre sous le nom de Feature Toggles, Feature Switches, Feature Flag et bien d’autres encore), qui a pour principe de donner la possibilité de contrôler l’accès à des fonctionnalités de vos applications. Cette technique devient pertinente lorsque que par exemple, nous voulons mettre en place des fonctionnalités destinées à un public cible (beta user, premium user …), que nous souhaitons avoir plus de contrôle sur l’ensemble des services proposés par une application (possibilité de désactiver telle ou telle fonctionnalité pour maintenance, évolution, correctifs). Cette méthodologie peut être implémentée dans différents langage et de manière différente, cela va être à vous de choisir ce qui correspond le mieux à votre besoin. Il existe déjà des librairies, des Frameworks, et même des solutions SaaS pour répondre à ce besoin.</summary></entry><entry><title type="html">Kafka</title><link href="/articles/architecture/kafka/" rel="alternate" type="text/html" title="Kafka" /><published>2023-05-11T02:00:00-05:00</published><updated>2023-05-11T02:00:00-05:00</updated><id>/articles/architecture/kafka</id><content type="html" xml:base="/articles/architecture/kafka/">&lt;h5 id=&quot;introduction-à-kafka&quot;&gt;Introduction à Kafka&lt;/h5&gt;

&lt;p&gt;Bienvenue dans cette vidéo !
Ici nous allons vulgariser les concepts de bases liés à Kafka, et vous donner une idée des cas dans lesquels il est justifié de l’utiliser.
Après cette vidéo vous en aurez appris davantage sur les principes de base de Kafka, les différentes briques qui le composent, leurs fonctionnement et interactions ainsi que les alternatives existantes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/articles/architecture/kafka//kafka.png&quot; alt=&quot;image&quot; /&gt; &lt;br /&gt;&lt;/p&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;315&quot; src=&quot;https://www.youtube-nocookie.com/embed/1I8oVv7LNUM&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;!--END_SUMMARY--&gt;</content><author><name>[&quot;yohann_gueguin&quot;]</name></author><category term="Architecture" /><summary type="html">Introduction à Kafka Bienvenue dans cette vidéo ! Ici nous allons vulgariser les concepts de bases liés à Kafka, et vous donner une idée des cas dans lesquels il est justifié de l’utiliser. Après cette vidéo vous en aurez appris davantage sur les principes de base de Kafka, les différentes briques qui le composent, leurs fonctionnement et interactions ainsi que les alternatives existantes.</summary></entry><entry><title type="html">Créer un site web de documentation statique avec MkDocs</title><link href="/articles/common/mkdocs-material/" rel="alternate" type="text/html" title="Créer un site web de documentation statique avec MkDocs" /><published>2023-04-27T03:00:00-05:00</published><updated>2023-04-27T03:00:00-05:00</updated><id>/articles/common/mkdocs-material</id><content type="html" xml:base="/articles/common/mkdocs-material/">&lt;h1 id=&quot;créer-un-site-web-de-documentation-statique-avec-mkdocs&quot;&gt;Créer un site web de documentation statique avec MkDocs&lt;/h1&gt;

&lt;p&gt;Que ce soit pour un projet d’entreprise ou un projet open-source, la documentation utilisateur et technique est cruciale.
Dans une documentation d’usage, les utilisateurs doivent pouvoir retrouver les instructions leur permettant d’accomplir les gestes métier de tous les jours.
Pour la documentation technique, les administrateurs, opérateurs et développeurs doivent pouvoir retrouver les opérations d’installation, de mise à jour, ou encore de développement du produit.&lt;/p&gt;

&lt;p&gt;La documentation peut prendre plusieurs formes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;un document bureautique, de type LibreOffice Writer ou Microsoft Word&lt;/li&gt;
  &lt;li&gt;des pages dans un référentiel documentaire de type &lt;em&gt;wiki&lt;/em&gt;, ou &lt;em&gt;Atlassian Confluence&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;un site web dédié&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Les documents bureautique sont bien adaptés à la documentation de procédures, ou de spécifications. Cependant, ils souffrent de nombreux défauts comme le manque d’archivage des modifications, une recherche compliquée, un fort liant entre le format et le contenu et sont souvent portés par des formats propriétaires (le fameux &lt;code class=&quot;highlighter-rouge&quot;&gt;.docx&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Les référentiels de type &lt;em&gt;wiki&lt;/em&gt; répondent au problèmes de recherche et d’archivage des historiques de modifications. Cependant, ils nécessitent souvent une infrastructure avec une base de données, et ont donc un coût d’hébergement et de maintenance.&lt;/p&gt;

&lt;p&gt;Le cas du site web statique dédié est le plus adapté à un projet open-source. Le site sera exposé sur internet, aidant à mettre en visibilité le projet. Un site web statique nécessite un hébergement minimum, sans base de données, et sera donc plus simple à mettre en place.&lt;/p&gt;

&lt;!--END_SUMMARY--&gt;

&lt;h1 id=&quot;documentation-as-code&quot;&gt;&lt;em&gt;documentation-as-code&lt;/em&gt;&lt;/h1&gt;

&lt;p&gt;Pour encourager les développeurs à rédiger plus de documentation, il est intéressant de considérer l’approche &lt;em&gt;documentation-as-code&lt;/em&gt;.
Cette approche s’appuie sur les process et outils de développement pour proposer aux développeurs un moyen moderne d’écrire et publier leur documentation.&lt;/p&gt;

&lt;p&gt;Dans un processus de &lt;em&gt;documentation-as-code&lt;/em&gt;, les développeurs rédigent et archivent la documentation au même endroit que le code source, dans un repository &lt;em&gt;git&lt;/em&gt;.
Cela permet de fournir une documentation plus précise, et plus à jour. Les mises à jour de documentation sont effectuées en même temps que les mises à jour du code source.&lt;/p&gt;

&lt;p&gt;Un site web de documentation pourra alors être généré à partir des documents rédigés par les développeurs. Ce site pourra être publié avec des chaînes d’intégration continue.&lt;/p&gt;

&lt;h2 id=&quot;les-formats-asciidoc-et-markdown&quot;&gt;Les formats &lt;em&gt;asciidoc&lt;/em&gt; et &lt;em&gt;markdown&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;En &lt;em&gt;documentation-as-code&lt;/em&gt;, la documentation sera écrite dans un format simple, déjà maitrisé par les développeurs. Un des avantages principaux est que ces formats peuvent être édités dans les IDE que les développeurs utilisent déjà.&lt;/p&gt;

&lt;p&gt;Les deux formats les plus utilisés sont l’&lt;em&gt;asciidoc&lt;/em&gt; et le &lt;em&gt;markdown&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;L’intérêt d’utiliser ces formats est multiple:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;le développeur se concentre sur la rédation du contenu plutôt que sur le formattage des données&lt;/li&gt;
  &lt;li&gt;la documentation peut être archivée comme du code source, voire dans le même repository que le projet&lt;/li&gt;
  &lt;li&gt;ces formats sont simples d’utilisation, même pour des personnes ayant peu ou pas de connaissances techniques&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;les-générateurs-de-sites-web-statiques&quot;&gt;Les générateurs de sites web statiques&lt;/h2&gt;

&lt;p&gt;Des fichiers &lt;em&gt;markdown&lt;/em&gt; ou &lt;em&gt;asciidoc&lt;/em&gt; sur un repository &lt;em&gt;git&lt;/em&gt; peuvent parfois être suffisant. &lt;em&gt;Gitlab&lt;/em&gt; et &lt;em&gt;Github&lt;/em&gt; sont capables d’afficher des fichiers &lt;em&gt;markdown&lt;/em&gt; ou &lt;em&gt;asciidoc&lt;/em&gt; directement dans leur interface. C’est le cas par exemple des fameux &lt;code class=&quot;highlighter-rouge&quot;&gt;README.md&lt;/code&gt; qu’on retrouve sur une majorité de projets.
Cet usage peut suffire pour documenter une librairie ou un projet simple. 
D’autres projets, plus compliqués, auront plus de pages de documentation, et des besoins de personnalisation, c’est là où un générateur de site web statique sera utile.&lt;/p&gt;

&lt;h3 id=&quot;asciidoc-et-asciidoctor&quot;&gt;&lt;em&gt;asciidoc&lt;/em&gt; et &lt;em&gt;asciidoctor&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;La suite de cet article ne décrira pas comment mettre en place &lt;em&gt;asciidoc&lt;/em&gt; et &lt;em&gt;asciidoctor&lt;/em&gt;, mais il était important de mentionner ces outils, qui sont utilisés par de nombreux projets.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;asciidoc&lt;/em&gt;, couplé au générateur &lt;em&gt;asciidoctor&lt;/em&gt; permet directement de générer des pages &lt;em&gt;HTML&lt;/em&gt; statiques à partir de un ou plusieurs fichiers de documentation source.
Les pages &lt;em&gt;HTML&lt;/em&gt; générées peuvent alors être publiées directement.
C’est ce qui est utilisé par le framework Java &lt;em&gt;Spring&lt;/em&gt; par exemple.&lt;/p&gt;

&lt;p&gt;Voici à titre d’exemple la &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/&quot; target=&quot;_blank&quot;&gt;documentation générée pour le framework Spring&lt;/a&gt; , à partir des documents &lt;em&gt;asciidoc&lt;/em&gt; disponible sur &lt;em&gt;Github&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/articles/common/mkdocs-material//mkdocs-spring.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Les sources sont visibles sur le &lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/main/spring-boot-project/spring-boot-docs/src/docs/asciidoc&quot; target=&quot;_blank&quot;&gt;&lt;em&gt;Github&lt;/em&gt; de &lt;em&gt;Spring&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Spring&lt;/em&gt; utilise donc &lt;em&gt;asciidoctor&lt;/em&gt; pour générer leur documentation dans 3 formats différents:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;un pdf complet&lt;/li&gt;
  &lt;li&gt;une page HTML complète (autonome)&lt;/li&gt;
  &lt;li&gt;un ensemble de pages HTMLs liées entre elles&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;markdown-et-mkdocs&quot;&gt;&lt;em&gt;markdown&lt;/em&gt; et &lt;em&gt;MkDocs&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;Bien qu’&lt;em&gt;asciidoctor&lt;/em&gt; propose de générer plusieurs formats, d’autres générateurs compatibles Markdown existent:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://jekyllrb.com/&quot; target=&quot;_blank&quot;&gt;&lt;em&gt;Jekyll&lt;/em&gt;&lt;/a&gt;, est plutôt orienté blogging&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gohugo.io/&quot; target=&quot;_blank&quot;&gt;&lt;em&gt;Hugo&lt;/em&gt;&lt;/a&gt;, est orienté site web généraliste&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.mkdocs.org/&quot; target=&quot;_blank&quot;&gt;&lt;em&gt;MkDocs&lt;/em&gt;&lt;/a&gt;, est orienté documentation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ces générateurs amènent une structure de site web classique, avec une navigation à plusieurs niveaux de menus, et souvent des champs de recherche.&lt;/p&gt;

&lt;p&gt;Parmis ces 3 solutions, &lt;em&gt;MkDocs&lt;/em&gt; est le plus orienté documentation, c’est cet outil que nous allons mettre en place dans la suite de cet article.&lt;/p&gt;

&lt;h1 id=&quot;mise-en-place-de-mkdocs&quot;&gt;Mise en place de &lt;em&gt;MkDocs&lt;/em&gt;&lt;/h1&gt;

&lt;p&gt;Nous allons voir dans la suite de cet article:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;l’installation et la configuration de &lt;em&gt;MkDocs&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;l’utilisation et la configuration d’un thème et sa customisation (logo, couleurs)&lt;/li&gt;
  &lt;li&gt;la rédaction de quelques pages&lt;/li&gt;
  &lt;li&gt;la publication en site statique avec &lt;em&gt;Github Actions&lt;/em&gt; &amp;amp; &lt;em&gt;Github Pages&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;création-du-projet-de-documentation&quot;&gt;Création du projet de documentation&lt;/h1&gt;

&lt;p&gt;La documentation peut être créée comme un repository Git dédié, ou comme un répertoire d’un repository existant, dans le cas d’une approche &lt;em&gt;mono-repo&lt;/em&gt; par exemple.&lt;/p&gt;

&lt;p&gt;C’est cette deuxième solution que nous allons suivre.
Dans un projet existant, on commence par créer un répertoire &lt;code class=&quot;highlighter-rouge&quot;&gt;docs&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;docs/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;La création du squelette de documentation peut se faire avec le &lt;em&gt;CLI&lt;/em&gt; (pour Command Line Interface) de &lt;em&gt;MkDocs&lt;/em&gt; et la commande &lt;a href=&quot;https://www.mkdocs.org/user-guide/cli/#mkdocs-new&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mkdocs new&lt;/code&gt;&lt;/a&gt;, ou simplement en initialisant quelques fichiers à la main.&lt;/p&gt;

&lt;p&gt;Nous allons créer l’arborescence suivante:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.
├─ docs/
│  └─ index.md
└─ mkdocs.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Le contenu de notre fichier &lt;code class=&quot;highlighter-rouge&quot;&gt;mkdocs.yml&lt;/code&gt; minimal est le suivant:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;site_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Galactic Empire&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Pour référence, la &lt;a href=&quot;https://www.mkdocs.org/user-guide/configuration/&quot; target=&quot;_blank&quot;&gt;documentation de &lt;em&gt;MkDocs&lt;/em&gt;&lt;/a&gt; liste les paramètres de configuration qui peuvent être modifiés dans le fichier &lt;code class=&quot;highlighter-rouge&quot;&gt;mkdocs.yml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Un fichier &lt;code class=&quot;highlighter-rouge&quot;&gt;docs/index.md&lt;/code&gt; permet de servir de page d’accueil:&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gh&quot;&gt;# Documentation&lt;/span&gt;

Bienvenue sur la documentation de l'Empire Galactique
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;démarrage-de-mkdocs-en-mode-preview&quot;&gt;Démarrage de &lt;em&gt;MkDocs&lt;/em&gt; en mode preview&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;MkDocs&lt;/em&gt; est écrit en python, et peut être installé en quelques commandes. La &lt;a href=&quot;https://www.mkdocs.org/user-guide/installation/#installing-mkdocs&quot; target=&quot;_blank&quot;&gt;procédure d’installation&lt;/a&gt; est simple:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;mkdocs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Il existe également des images &lt;em&gt;Docker&lt;/em&gt; dédiées, qui seront utiles pour l’automatisation avec &lt;em&gt;Github Actions&lt;/em&gt; ou &lt;em&gt;Gitlab CI&lt;/em&gt; pour la publication, bien que nous allons nous en passer.&lt;/p&gt;

&lt;p&gt;Le démarrage du site, en mode &lt;em&gt;preview&lt;/em&gt;, se fait en une commande:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mkdocs serve
INFO     -  Building documentation...
INFO     -  Cleaning site directory
INFO     -  Documentation built &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;0.15 seconds
INFO     -  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;09:32:45] Watching paths &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;changes: &lt;span class=&quot;s1&quot;&gt;'docs'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'mkdocs.yml'&lt;/span&gt;
INFO     -  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;09:32:45] Serving on http://127.0.0.1:8000/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Le site web est construit, et disponible en local:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/articles/common/mkdocs-material//create-docs-website-preview.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;ajout-dun-thème--customisation&quot;&gt;Ajout d’un thème &amp;amp; customisation&lt;/h1&gt;

&lt;p&gt;Le thème par défaut n’est pas très élégant.
Plusieurs thèmes existent, et il est possible de créer le sien, à condition de savoir un peu développer en HTML/CSS.&lt;/p&gt;

&lt;p&gt;Néanmoins, un thème populaire est &lt;a href=&quot;https://squidfunk.github.io/mkdocs-material&quot; target=&quot;_blank&quot;&gt;&lt;em&gt;Material for MkDocs&lt;/em&gt;&lt;/a&gt; (13k stars sur &lt;em&gt;Github&lt;/em&gt;). Ce thème propose une interface épurée, personnalisable, et le support d’extensions à &lt;em&gt;markdown&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;L’installation du thème se fait en une ligne de commande:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;mkdocs-material
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Pour utiliser notre thème, il faut le préciser dans le fichier &lt;code class=&quot;highlighter-rouge&quot;&gt;mkdocs.yml&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;site_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Galactic Empire&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# configuration du thème&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;theme&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;material&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Nous allons maintenant un peu customiser notre thème.
Toutes les instructions sont disponible dans la &lt;a href=&quot;https://squidfunk.github.io/mkdocs-material/setup/changing-the-colors/&quot; target=&quot;_blank&quot;&gt;documentation de &lt;em&gt;Material for Mkdocs&lt;/em&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;h2 id=&quot;le-logo&quot;&gt;Le logo&lt;/h2&gt;

&lt;p&gt;Pour changer le logo, il faut indiquer quel fichier utiliser dans la configuration.
Pour notre exemple, je suis allé chercher un logo libre de droits sur le site web &lt;a href=&quot;https://pngrepo.com&quot; target=&quot;_blank&quot;&gt;https://pngrepo.com&lt;/a&gt;, et je l’ai positionné dans un répertoire &lt;code class=&quot;highlighter-rouge&quot;&gt;docs/assets&lt;/code&gt; que j’ai créé pour l’occasion:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.
├── docs
│   ├── assets
│   │   └── death-star.png
│   └── index.md
└── mkdocs.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Le logo est ensuite référencé dans le fichier de configuration:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;site_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Galactic Empire project&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# configuration du thème&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;theme&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;material&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;logo&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;assets/death-star.png&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;À noter que le répertoire &lt;em&gt;assets&lt;/em&gt; déclaré dans la configuration est bien relatif au répertoire &lt;em&gt;docs&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;les-couleurs&quot;&gt;Les couleurs&lt;/h2&gt;
&lt;p&gt;La configuration des couleurs passe par une déclaration CSS, si on veut sortir des couleurs proposées dans la palette de couleurs par défaut.
Un fichier css peut surcharger l’ensemble des variables de couleurs prédéfinies. La liste des variables est disponible dans le &lt;a href=&quot;https://github.com/squidfunk/mkdocs-material/blob/master/src/assets/stylesheets/main/_colors.scss&quot; target=&quot;_blank&quot;&gt;fichier de définition des couleurs&lt;/a&gt; du code source de &lt;em&gt;Material for MkDocs&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Pour surcharger les couleurs principales, il suffit donc de les re-déclarer dans un fichier &lt;code class=&quot;highlighter-rouge&quot;&gt;.css&lt;/code&gt;, de cette manière:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;:root&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;--md-primary-fg-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#394A59&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;--md-accent-fg-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;#556567&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Le fichier &lt;code class=&quot;highlighter-rouge&quot;&gt;.css&lt;/code&gt; doit être déposé où l’on souhaite. Ici, nous avons créé un répertoire &lt;code class=&quot;highlighter-rouge&quot;&gt;docs/stylesheets&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.
├── docs
│   ├── assets
│   │   └── death-star.png
│   ├── index.md
│   └── stylesheets
│       └── galactic-empire.css
└── mkdocs.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Enfin, le fichier &lt;code class=&quot;highlighter-rouge&quot;&gt;.css&lt;/code&gt; doit être référencé dans la configuration de notre site:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;site_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Galactic Empire project&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# configuration du thème&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;theme&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;material&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;logo&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;assets/death-star.png&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;extra_css&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;stylesheets/galactic-empire.css&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Et voici notre site avec le thème et sa customisation.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/articles/common/mkdocs-material//create-docs-website-theme.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;lajout-de-contenu&quot;&gt;L’ajout de contenu&lt;/h1&gt;
&lt;p&gt;L’ajout de contenu passe maintenant simplement par l’ajout de nouveaux fichiers &lt;em&gt;markdown&lt;/em&gt; dans le répertoire de documentation.&lt;/p&gt;

&lt;p&gt;Voici un exemple de page de contenu supplémentaire:&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Organisation&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Darth Vader&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;

&lt;span class=&quot;gh&quot;&gt;# Organisation de l'Empire Galactique&lt;/span&gt;

L'Empire Galactique est dirigé par l'Empereur Palpatine.

Son bras droit est le seigneur Vador.

Le Grand Moff Tarkin est le gouverneur régional de la Bordure Extérieur.
Il est à la tête du projet &quot;Étoile de la mort&quot;, et son commandant.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;L’en-tête du fichier est au format &lt;em&gt;Front Matter&lt;/em&gt;, qui a été popularisé par &lt;a href=&quot;https://jekyllrb.com/docs/front-matter/&quot; target=&quot;_blank&quot;&gt;&lt;em&gt;Jekyll&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Le rendu est le suivant:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/articles/common/mkdocs-material//create-docs-website-content-page.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Notez que :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;le titre de la page est celui du premier header Markdown &lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;dans la navigation de gauche, le titre utilisé est celui du bloc de description de la page &lt;em&gt;Front Matter&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;le nom de l’auteur apparaît dans les méta-données de la page générée:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  ...
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;author&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Darth Vader&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  ...
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&lt;/span&gt;      
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;publication-avec-github-actions--github-pages&quot;&gt;Publication avec &lt;em&gt;Github Actions&lt;/em&gt; &amp;amp; &lt;em&gt;Github Pages&lt;/em&gt;&lt;/h1&gt;

&lt;p&gt;Maintenant que notre site web est fonctionnel, nous allons le mettre à disposition sur le web avec &lt;em&gt;Github Pages&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;La création d’un repository &lt;em&gt;Github&lt;/em&gt; et les bases de &lt;em&gt;Github Actions&lt;/em&gt; sont en dehors du périmètre de cet article.&lt;/p&gt;

&lt;p&gt;La construction du site web se fait avec la commande &lt;code class=&quot;highlighter-rouge&quot;&gt;mkdocs build&lt;/code&gt;.
L’exécution de cette commande produit un nouveau répertoire &lt;code class=&quot;highlighter-rouge&quot;&gt;site&lt;/code&gt; qui contient le site web généré:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mkdocs build 
INFO     -  Cleaning site directory
INFO     -  Building documentation to directory: ekit3/mkdocs-website-sample/site
INFO     -  Documentation built &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;0.16 seconds
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Nous allons donc utiliser cette commmande pour générer notre site web à publier.&lt;/p&gt;

&lt;p&gt;Voici un workflow &lt;em&gt;Github Actions&lt;/em&gt;, qui installe le langage &lt;em&gt;Python&lt;/em&gt;, &lt;em&gt;MkDocs&lt;/em&gt; et &lt;em&gt;Material for MkDocs&lt;/em&gt;, et construit notre site:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Build &amp;amp; Publish site&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;main&quot;&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;pull_request&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;main&quot;&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/checkout@v3&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Set up Python $&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/setup-python@v3&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Install dependencies&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;python -m pip install mkdocs&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;python -m pip install mkdocs-material&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Build site&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;mkdocs build&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;L’étape suivante consiste à publier le site construit sur &lt;em&gt;Github Pages&lt;/em&gt;, ce qui se fait avec 2 actions dédiées.&lt;/p&gt;

&lt;p&gt;L’action &lt;code class=&quot;highlighter-rouge&quot;&gt;upload-pages-artifact&lt;/code&gt; permet de sélectionner un répertoire à envoyer à Github Pages, en l’occurence, notre répertoire &lt;code class=&quot;highlighter-rouge&quot;&gt;site&lt;/code&gt;, qui contient notre site web.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Upload Pages Artifact&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/upload-pages-artifact@v1&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./site&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cette action peut être ajoutée au job &lt;em&gt;build&lt;/em&gt; décrit plus haut.&lt;/p&gt;

&lt;p&gt;Enfin, l’action &lt;code class=&quot;highlighter-rouge&quot;&gt;deploy-pages&lt;/code&gt; permet d’exécuter le déploiement, nous l’ajoutons dans un job séparé:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;deploy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;needs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;build&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;permissions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;pages&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;write&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;id-token&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;write&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;github-pages&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Deploy to GitHub Pages&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;deployment&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/deploy-pages@v1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Le fichier final complet est disponible sur &lt;a href=&quot;https://github.com/ekit3/mkdocs-website-sample/blob/main/.github/workflows/publish.yml&quot; target=&quot;_blank&quot;&gt;le repository &lt;em&gt;Github&lt;/em&gt;&lt;/a&gt; contenant le code source de cet article.&lt;/p&gt;

&lt;p&gt;À noter que le déploiement avec &lt;em&gt;Github Pages&lt;/em&gt; doit être activé dans le repository &lt;em&gt;Github&lt;/em&gt;, et que le repository doit être public :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/articles/common/mkdocs-material//create-docs-website-github-pages.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Une fois le fichier Github Actions publié, le workflow pourra s’exécuter, et publier le site web:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/articles/common/mkdocs-material//create-docs-website-workflow.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Le résultat final est visible &lt;a href=&quot;https://ekit3.github.io/mkdocs-website-sample/&quot; target=&quot;_blank&quot;&gt;via ce lien&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Le code source de cet article est disponible dans notre repository &lt;em&gt;Github&lt;/em&gt; &lt;a href=&quot;https://github.com/ekit3/mkdocs-website-sample&quot; target=&quot;_blank&quot;&gt;mkdocs-website-sample&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;En conclusion, nous avons vu les principes de documentation-as-code, et qu’il était très simple de publier une documentation sous la forme d’un site web. 
Nous avons également vu comment utiliser le format &lt;em&gt;markdown&lt;/em&gt;, couplé à l’outil &lt;em&gt;MkDocs&lt;/em&gt; et le thème &lt;em&gt;Material for MkDocs&lt;/em&gt; pour générer un site web et le personnaliser.
Enfin, nous avons vu comment utiliser &lt;em&gt;Github Actions&lt;/em&gt; et &lt;em&gt;Github Pages&lt;/em&gt; pour publier notre site de documentation sur internet.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;MkDocs&lt;/em&gt;, couplé à un hébergement avec &lt;em&gt;Gitlab Pages&lt;/em&gt; ou &lt;em&gt;Github Pages&lt;/em&gt;, permet de générer un site web en quelques étapes rapides.
Cela en fait l’outil idéal pour documenter un projet open-source ou interne.&lt;/p&gt;

&lt;h1 id=&quot;liens&quot;&gt;Liens&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.mkdocs.org/&quot; target=&quot;_blank&quot;&gt;Documentation&lt;/a&gt; de &lt;em&gt;MkDocs&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://squidfunk.github.io/mkdocs-material/&quot; target=&quot;_blank&quot;&gt;Documentation&lt;/a&gt; de &lt;em&gt;Material for MkDocs&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://squidfunk.github.io/mkdocs-material/setup/changing-the-colors/&quot; target=&quot;_blank&quot;&gt;La customisation&lt;/a&gt; de &lt;em&gt;Material for MkDocs&lt;/em&gt; (couleurs, fonts, icônes)&lt;/li&gt;
  &lt;li&gt;L’icône &lt;em&gt;Death Star&lt;/em&gt; utilisée pour le site généré sur &lt;a href=&quot;https://www.pngrepo.com/svg/275952/death-star-star-wars&quot; target=&quot;_blank&quot;&gt;pngrepo.com&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Les actions Github utilisées:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/actions/upload-pages-artifact&quot; target=&quot;_blank&quot;&gt;upload-pages-artifact&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/actions/deploy-pages&quot; target=&quot;_blank&quot;&gt;deploy-pages&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Le &lt;a href=&quot;https://github.com/ekit3/mkdocs-website-sample&quot; target=&quot;_blank&quot;&gt;code source&lt;/a&gt; associé à cet article&lt;/li&gt;
&lt;/ul&gt;</content><author><name>[&quot;julien_wittouck&quot;]</name></author><category term="Common" /><category term="git" /><category term="tools" /><category term="docs" /><summary type="html">Créer un site web de documentation statique avec MkDocs Que ce soit pour un projet d’entreprise ou un projet open-source, la documentation utilisateur et technique est cruciale. Dans une documentation d’usage, les utilisateurs doivent pouvoir retrouver les instructions leur permettant d’accomplir les gestes métier de tous les jours. Pour la documentation technique, les administrateurs, opérateurs et développeurs doivent pouvoir retrouver les opérations d’installation, de mise à jour, ou encore de développement du produit. La documentation peut prendre plusieurs formes: un document bureautique, de type LibreOffice Writer ou Microsoft Word des pages dans un référentiel documentaire de type wiki, ou Atlassian Confluence un site web dédié Les documents bureautique sont bien adaptés à la documentation de procédures, ou de spécifications. Cependant, ils souffrent de nombreux défauts comme le manque d’archivage des modifications, une recherche compliquée, un fort liant entre le format et le contenu et sont souvent portés par des formats propriétaires (le fameux .docx). Les référentiels de type wiki répondent au problèmes de recherche et d’archivage des historiques de modifications. Cependant, ils nécessitent souvent une infrastructure avec une base de données, et ont donc un coût d’hébergement et de maintenance. Le cas du site web statique dédié est le plus adapté à un projet open-source. Le site sera exposé sur internet, aidant à mettre en visibilité le projet. Un site web statique nécessite un hébergement minimum, sans base de données, et sera donc plus simple à mettre en place.</summary></entry><entry><title type="html">Abstract Data Types</title><link href="/articles/common/abstract-data-types/" rel="alternate" type="text/html" title="Abstract Data Types" /><published>2023-03-15T02:00:00-05:00</published><updated>2023-03-15T02:00:00-05:00</updated><id>/articles/common/abstract-data-types</id><content type="html" xml:base="/articles/common/abstract-data-types/">&lt;h5 id=&quot;les-types-abstraits-ou-pourquoi-vous-devez-utiliser-optional&quot;&gt;Les types abstraits, ou pourquoi vous devez utiliser Optional&lt;/h5&gt;

&lt;p&gt;En tant que développeur, nous cherchons souvent des moyens d’améliorer nos applications. Les rendre plus robustes, plus normées, ou encore anéantir les potentiels effets de bord. La montée des langages fonctionnels a pu faire réapparaître certains concepts mathématiques pour améliorer tout ça.
C’est le cas des types abstraits (en anglais, abstract data type ou ADT). Au-delà des gains cités, certains ADT permettent d’améliorer la gestion de certains langages.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/articles/common/abstract-data-types//henry_1.png&quot; alt=&quot;image&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;L’illustre Henri, qui aime tant les mathématiques, semble être très intéressé par le sujet, mais surtout parce qu’il existe un ADT pour optimiser &lt;a href=&quot;https://ekite.tech/articles/front-end/algebraic-structure/&quot;&gt;son application du plus fort cailloux&lt;/a&gt;. Cela permettra d’illustrer les explications qui suivent.
&lt;!--END_SUMMARY--&gt;&lt;/p&gt;

&lt;h5 id=&quot;définitions&quot;&gt;Définitions&lt;/h5&gt;

&lt;p&gt;Pour créer un type de donnée il faut réunir un ensemble de valeurs et des opérations à appliquer sur cet ensemble. On peut prendre exemple sur les nombres entiers (int, integer).
Il est possible d’appliquer une multitude d’opérations sur les entiers : additions, soustractions, multiplications, etc.&lt;/p&gt;

&lt;p&gt;Une des analogies les plus reprises en informatique des types de données sont les primitives, comme les entiers, les booléens, ou les float par exemple.
N.B : Les types primitifs sont nativement gérés par le langage, qui stocke directement les valeurs des variables en mémoire, parfois dans une zone mémoire dédiée (la stack).&lt;/p&gt;

&lt;p&gt;L’évolution d’un type de donnée, ce sont les types de données définis par utilisateur. Pour vulgariser il s’agit d’une structure nommée et composée de type de données. Il est possible de les représenter par des structures, des énumérations ou encore des unions. Pour illustrer la représentation d’un point est un type de données définies par utilisateur : Point(int x, int y).&lt;/p&gt;

&lt;p&gt;Les types de données défini par utilisateur ne sont pas définis par la machine contrairement aux primitives. Les opérations sous-jacentes de ce type de données sont elles aussi définies par l’utilisateur (le développeur).&lt;/p&gt;

&lt;p&gt;Un type abstrait peut être représenté comme le moule d’un type de données définis par utilisateur à la différence près que ce type doit amener une certaine robustesse dans l’écriture de types. 
Ce type de données doit répondre à trois contraintes pour subsister dans un système de type. Il doit être capable de définir des types sommes, produits et récursifs.&lt;/p&gt;

&lt;h5 id=&quot;pré-requis-du-système-de-type-pour-faire-des-adt&quot;&gt;Pré-requis du système de type pour faire des ADT&lt;/h5&gt;

&lt;p&gt;1 - Le type somme (tagged-union, variant) c’est la capacité de définir un type pouvant se définir par un sous-ensemble fini de types. En Java cela correspond aux sealed-interface, en OCaml ce sont les variants, en Rust les enum.
Exemple en OCaml :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; type month_type = 
  | PLEIN 
  | CREUX 
  | BIS of int
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;2 - Le type produit (record) correspond à la capacité de créer des structures dans un langage. En Java, on peut créer des objets ou des records, en Rust ou en C on peut créer des structures (struct).&lt;/p&gt;

&lt;p&gt;3 - Le type récursif correspond à la capacité pour un type de s’appeler lui-même. 
Exemple avec les variants :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; type List = 
  | Item of int * List
  | Empty

Item (1, Item (2, Item ( 3, Empty)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Voici une liste de quelques langages permettant de faire des ADT :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Caml&lt;/li&gt;
  &lt;li&gt;Rust&lt;/li&gt;
  &lt;li&gt;Haskell&lt;/li&gt;
  &lt;li&gt;Java 17+&lt;/li&gt;
  &lt;li&gt;Typescript&lt;/li&gt;
  &lt;li&gt;Python&lt;/li&gt;
  &lt;li&gt;Scala&lt;/li&gt;
  &lt;li&gt;Kotlin&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;cas-dutilisations&quot;&gt;Cas d’utilisations&lt;/h5&gt;

&lt;p&gt;Les types de données abstraits permettent d’acquérir de la robustesse applicative ET conceptuelle. Cela permet également de pouvoir créer des &lt;a href=&quot;https://ekite.tech/articles/other/design-pattern/&quot;&gt;design pattern&lt;/a&gt; purs et de simplifier la mise en place de machine à état.
Enfin les ADT permettent de rapprocher les données d’un programme lié aux &lt;a href=&quot;https://ekite.tech/articles/front-end/algebraic-structure/&quot;&gt;structures algébriques&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Voici une liste de quelques types abstraits connus, liés aux structures algébriques:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;La présence de valeur (Option)&lt;/li&gt;
  &lt;li&gt;La réussite d’un programme (Try)&lt;/li&gt;
  &lt;li&gt;La réussite ou l’erreur d’un programme (Result)&lt;/li&gt;
  &lt;li&gt;La possibilité d’afficher une donnée (Show)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Henri a préparé quelques cartes que vous pourrez trouver &lt;a href=&quot;https://docs.google.com/presentation/u/0/d/1P06bSfyXNix0k740iRl1LyyqNyRibcAOsTWn9lomjUo/edit&quot;&gt;ici&lt;/a&gt; !&lt;/p&gt;

&lt;h5 id=&quot;la-parole-à-henri&quot;&gt;La parole à Henri&lt;/h5&gt;

&lt;p&gt;Henri nous rappelle que son application a été codée en Java 17.
La gestion d’erreur dans certains langages peut-être très gourmande en termes de ressources. Ce &lt;a href=&quot;https://www.infoworld.com/article/2076868/how-the-java-virtual-machine-handles-exceptions.html&quot;&gt;lien&lt;/a&gt; explique en détails le bytecode derrière un try-catch. Pour résumer, lorsqu’une exception survient il faut pouvoir dire à la machine de revenir en arrière et exécuter le code dans la partie “catch”.
Plusieurs années se sont écoulées depuis et Henri trouve que son application est obsolète
Il demande à son ami de faire évoluer son application, mais se retrouve depuis quelques temps confronté à une multitude de problème qu’il ne comprend pas :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    java.lang.IllegalArgumentException: D20160229 is not a Caillou
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/articles/common/abstract-data-types//henry_2.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Henri est venu nous voir en nous expliquant qu’il a ce problème à chaque fois qu’il enregistre un de ses cailloux un 29 février. Cela fait déjà 6 ans qu’Henri n’arrive pas à enregistrer son caillou préféré.
Prenons notes de l’existant :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Les fonctionnalités sont rétro-compatibles avec l’ancien modèle.&lt;/li&gt;
  &lt;li&gt;La structure de données d’un caillou a changé comme suit :
    &lt;ul&gt;
      &lt;li&gt;Un caractère et 8 chiffres.
Nous décidons de corriger l’ensemble tel qu’il soit constitué d’un caractère et d’une date au format yyyyMMdd. (Cela corrigera en parti les problèmes de la nouvelle application d’Henri)
Nous ne pouvons donc plus nous fier à l’ensemble CPH (Cailloux Potentiels d’Henri), nous sommes sur un ensemble différent que nous nommerons NCPH (Nouveaux Cailloux Potentiels d’Henri) .
Notons que cet ensemble est composé de l’ensemble CPH et de toute chaîne de caractères avec les caractéristiques susmentionnées (nommons cet ensemble CPGH pour Cailloux Potentiels du Grand Henri). On obtient donc CPGH = CPH + NPCH.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/articles/common/abstract-data-types//henry_3.png&quot; alt=&quot;image&quot; /&gt; &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Malgré notre précédente correction Henri nous a remonté qu’il subsiste quelques lenteurs et nous fait part de ses besoins :&lt;br /&gt;
1 - Il veut pouvoir basculer sur son ancien modèle à tout moment.&lt;br /&gt;
2 - Faire en sorte que son application ne subisse plus de lenteurs / erreurs incompréhensibles.&lt;br /&gt;
Pour le premier point nous verrons une prochaine fois l’application de la théorie des catégories (plus particulièrement la flèche).
Pour le second ça tombe bien, car nous avons investigué et sommes tombé sur quelques imbrications de try-catch dignes d’une &lt;a href=&quot;https://en.wikipedia.org/wiki/Defensive_programming&quot;&gt;bonne programmation défensive&lt;/a&gt;. Cela s’explique par le fait de devoir convertir les éléments de CPH vers CPGH.
/!\ N’oublions pas qu’Henri procède à des millions d’enregistrements de cailloux par jour.&lt;/p&gt;

&lt;p&gt;La solution au problème &lt;img src=&quot;/articles/common/abstract-data-types//henry_4.png&quot; alt=&quot;image&quot; /&gt; &lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Caillou&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;letter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;charAt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;letter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;65&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;letter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;90&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s is not a Cailloux&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dayOfYear&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;substring&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dayOfYear&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dayOfYear&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;365&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s is not a Cailloux&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Caillou&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;letter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dayOfYear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handleCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;doSomethingWithCaillou&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;(L’ancien code.)&lt;/p&gt;

&lt;p&gt;Ces imbrications nous privent de précieuses performances. Une des solutions à ce problème c’est l’ADT Result. 
Malheureusement pour Henri en Java 17 il n’existe pas d’implémentation de Result. Cependant il y a eu une grande avancée permettant de créer ce genre de typage :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Les interfaces scellées&lt;/li&gt;
  &lt;li&gt;Les records&lt;/li&gt;
  &lt;li&gt;Le switch-pattern-matching
Voici comment on pourrait représenter le Result en Java 17&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sealed&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;permits&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Ok&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;requireNonNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Err&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;requireNonNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Ok&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Err&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Err&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;(source: &lt;a href=&quot;https://oteku.github.io/&quot;&gt;Thomas Haesslé&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Voici comment Henri l’utilise aujourd’hui&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Caillou&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;letter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;charAt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;letter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;65&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;letter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;90&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s is not a Cailloux&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dayOfYear&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;substring&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dayOfYear&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dayOfYear&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;365&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s is not a Cailloux&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Caillou&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;letter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dayOfYear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handleCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Err&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Caillou&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Caillou&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doSomethingWithCaillou&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;(Le nouveau code)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/articles/common/abstract-data-types//henry_5.png&quot; alt=&quot;image&quot; /&gt; &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Maintenant Henri est heureux, il propose pour conclure quelques cartes pour mémoriser certains ADT et leurs particularités.&lt;/p&gt;

&lt;p&gt;Sources&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Tagged_union&quot;&gt;https://en.wikipedia.org/wiki/Tagged_union&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://fr.wikipedia.org/wiki/Structure_de_donn%C3%A9es&quot;&gt;https://fr.wikipedia.org/wiki/Structure_de_donn%C3%A9es&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://fr.wikipedia.org/wiki/Type_abstrait&quot;&gt;https://fr.wikipedia.org/wiki/Type_abstrait&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dev.realworldocaml.org/variants.html&quot;&gt;https://dev.realworldocaml.org/variants.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jpintelli.com/2020/12/28/adt-with-java-sealed-classes-pattern-matching-records/&quot;&gt;https://jpintelli.com/2020/12/28/adt-with-java-sealed-classes-pattern-matching-records/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Record_(computer_science)&quot;&gt;https://en.wikipedia.org/wiki/Record_(computer_science)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://fr.wikipedia.org/wiki/Type_r%C3%A9cursif&quot;&gt;https://fr.wikipedia.org/wiki/Type_r%C3%A9cursif&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.shangjiaming.com/vavr-introduction/&quot;&gt;https://blog.shangjiaming.com/vavr-introduction/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.vavr.io/&quot;&gt;https://www.vavr.io/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://v2.ocaml.org/manual/gadts-tutorial.html&quot;&gt;https://v2.ocaml.org/manual/gadts-tutorial.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cs.wellesley.edu/~cs251/s12/handouts/modules.pdf&quot;&gt;https://cs.wellesley.edu/~cs251/s12/handouts/modules.pdf&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@aoturan/commonly-used-abstract-data-types-d9470b14f864&quot;&gt;https://medium.com/@aoturan/commonly-used-abstract-data-types-d9470b14f864&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>[&quot;florian_barbet&quot;]</name></author><category term="Common" /><summary type="html">Les types abstraits, ou pourquoi vous devez utiliser Optional En tant que développeur, nous cherchons souvent des moyens d’améliorer nos applications. Les rendre plus robustes, plus normées, ou encore anéantir les potentiels effets de bord. La montée des langages fonctionnels a pu faire réapparaître certains concepts mathématiques pour améliorer tout ça. C’est le cas des types abstraits (en anglais, abstract data type ou ADT). Au-delà des gains cités, certains ADT permettent d’améliorer la gestion de certains langages. L’illustre Henri, qui aime tant les mathématiques, semble être très intéressé par le sujet, mais surtout parce qu’il existe un ADT pour optimiser son application du plus fort cailloux. Cela permettra d’illustrer les explications qui suivent.</summary></entry><entry><title type="html">direnv pour booster votre shell</title><link href="/articles/devops/direnv-pour-votre-shell/" rel="alternate" type="text/html" title="direnv pour booster votre shell" /><published>2022-11-02T00:00:00-05:00</published><updated>2022-11-02T00:00:00-05:00</updated><id>/articles/devops/direnv-pour-votre-shell</id><content type="html" xml:base="/articles/devops/direnv-pour-votre-shell/">&lt;p&gt;Je suis le genre de développeur qui travaille toujours avec un terminal ouvert sur le côté, en plus de mon IDE.
Je lance souvent des commandes &lt;code class=&quot;highlighter-rouge&quot;&gt;mvn&lt;/code&gt; pour m’assurer que mon projet compile et que mes tests s’exécutent correctement. C’est un vieux réflexe qui date de l’époque où les IDE n’avaient qu’un support limité de &lt;em&gt;Maven&lt;/em&gt;. Lancer ces commandes hors-IDE m’aide souvent à valider que tout fonctionnera bien dans un environnement de CI par exemple.
J’ai donc parfois besoin de changer de version de &lt;em&gt;Java&lt;/em&gt; en fonction du projet dans lequel je me trouve.
&lt;em&gt;Maven&lt;/em&gt; utilise la variable d’environnement &lt;code class=&quot;highlighter-rouge&quot;&gt;JAVA_HOME&lt;/code&gt; pour localiser l’installation de &lt;em&gt;Java&lt;/em&gt; à utiliser. Donc être capable de charger des variables d’environnement différentes en fonction d’un projet peut s’avérer pratique.
Un autre usage courant consiste à venir charger des clé d’API ou des secrets d’accès cloud comme des variables &lt;code class=&quot;highlighter-rouge&quot;&gt;AWS_ACCESS_KEY&lt;/code&gt; ou autres en fonction de mes différents projets.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;direnv&lt;/code&gt; (&lt;a href=&quot;https://direnv.net/&quot; target=&quot;_blank&quot;&gt;lien&lt;/a&gt;) est un outil écrit en go qui permet de charger des variables d’environnement dans la session courante du terminal, lorsqu’on change de répertoire en effectuant un &lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; .&lt;/p&gt;

&lt;!--END_SUMMARY--&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;direnv&lt;/code&gt; est disponible dans les dépots de nombreuses distributions Linux, l’installation sur Ubuntu se fait avec les commandes habituelles, à savoir &lt;code class=&quot;highlighter-rouge&quot;&gt;apt install direnv&lt;/code&gt;.
L’installation pour d’autres distributions se fait à partir des dépôts, ou bien directement à partir de binaires pré-compilés à récupérer sur Github dans &lt;a href=&quot;https://github.com/direnv/direnv/releases&quot; target=&quot;_blank&quot;&gt;les releases de direnv&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;configuration&quot;&gt;Configuration&lt;/h2&gt;
&lt;p&gt;Une fois installé, il faut indiquer au shell d’appeler le binaire &lt;code class=&quot;highlighter-rouge&quot;&gt;direnv&lt;/code&gt; à chaque changement de répertoire.
Le shell que j’utilise au quotidien est &lt;code class=&quot;highlighter-rouge&quot;&gt;zsh&lt;/code&gt;. Pour &lt;code class=&quot;highlighter-rouge&quot;&gt;zsh&lt;/code&gt;, la configuration de &lt;code class=&quot;highlighter-rouge&quot;&gt;direnv&lt;/code&gt; consiste à venir modifier mon fichier &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.zshrc&lt;/code&gt; pour y ajouter la ligne suivante:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;direnv hook zsh&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Les procédures de configuration pour les autres shells sont détaillées &lt;a href=&quot;https://direnv.net/docs/hook.html&quot; target=&quot;_blank&quot;&gt;sur le site de direnv&lt;/a&gt; et sont du même ordre que la procédure ci-dessus.&lt;/p&gt;
&lt;h2 id=&quot;utilisation-basique&quot;&gt;Utilisation basique&lt;/h2&gt;
&lt;p&gt;L’utilisation de &lt;code class=&quot;highlighter-rouge&quot;&gt;direnv&lt;/code&gt; se fait au travers d’un fichier &lt;code class=&quot;highlighter-rouge&quot;&gt;.envrc&lt;/code&gt; à positionner dans le répertoire souhaité.
Ce fichier peut contenir:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;des commandes &lt;code class=&quot;highlighter-rouge&quot;&gt;export&lt;/code&gt; pour déclarer des variables d’environnement&lt;/li&gt;
  &lt;li&gt;des appels de fonction de la stdlib &lt;code class=&quot;highlighter-rouge&quot;&gt;direnv&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;des appels de fonction customisés&lt;/li&gt;
  &lt;li&gt;du code shell (bash)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Un exemple de fichier &lt;code class=&quot;highlighter-rouge&quot;&gt;.envrc&lt;/code&gt; déposé dans un répertoire &lt;code class=&quot;highlighter-rouge&quot;&gt;~/workspaces/demo-direnv&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;JAVA_HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/opt/jdk-17.0.1+12
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;MAVEN_HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/opt/apache-maven-3.8.4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Ce fichier déclare deux variables d’environnement qui me sont utiles dans un projet Java.
À l’entrée dans le répertoire contenant ce fichier, &lt;code class=&quot;highlighter-rouge&quot;&gt;direnv&lt;/code&gt; va tenter de charger le fichier. Les variables d’environnement exportées par le fichier seront alors chargées dans la session shell courante.
Au premier chargement d’un fichier, ou après une modification, &lt;code class=&quot;highlighter-rouge&quot;&gt;direnv&lt;/code&gt; demandera une validation explicite pour autoriser le fichier.&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~/workspaces &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;demo-direnv
direnv: error /home/jwittouck/workspaces/demo-direnv/.envrc is blocked. Run &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;direnv allow&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; to approve its content
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;J’exécute donc &lt;code class=&quot;highlighter-rouge&quot;&gt;direnv allow&lt;/code&gt; pour autoriser le chargement de mon fichier &lt;code class=&quot;highlighter-rouge&quot;&gt;.envrc&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~/workspaces/demo-direnv &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; direnv allow
direnv: loading ~/workspaces/demo-direnv/.envrc
direnv: &lt;span class=&quot;nb&quot;&gt;export&lt;/span&gt; +JAVA_HOME +MAVEN_HOME
~/workspaces/demo-direnv &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;direnv&lt;/code&gt; nous indique qu’il a chargé notre fichier, ainsi que nos deux variables d’environnement.
Nous pouvons maintenant les utiliser:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~/workspaces/demo-direnv &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$JAVA_HOME&lt;/span&gt;
/opt/jdk-17.0.1+12
~/workspaces/demo-direnv &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$MAVEN_HOME&lt;/span&gt;
/opt/apache-maven-3.8.4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Si on quitte le répertoire, les variables sont déchargées:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~/workspaces/demo-direnv &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ..
direnv: unloading
~/workspaces &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$JAVA_HOME&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# rien ici !&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;modification-du-path&quot;&gt;Modification du PATH&lt;/h2&gt;
&lt;p&gt;Pour nous simplifier la vie, &lt;code class=&quot;highlighter-rouge&quot;&gt;direnv&lt;/code&gt; propose des fonctions qui permettent de manipuler le &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt; facilement. La fonction &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH_add&lt;/code&gt; permet d’ajouter simplement une nouvelle valeur au &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt;. En voici un exemple dans mon fichier &lt;code class=&quot;highlighter-rouge&quot;&gt;.envrc&lt;/code&gt; précédent:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;JAVA_HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/opt/jdk-17.0.1+12
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;MAVEN_HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/opt/apache-maven-3.8.4

PATH_add &lt;span class=&quot;nv&quot;&gt;$JAVA_HOME&lt;/span&gt;/bin
PATH_add &lt;span class=&quot;nv&quot;&gt;$MAVEN_HOME&lt;/span&gt;/bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Avec cette nouvelle version de mon fichier, j’ai donc ajouté mes versions de &lt;code class=&quot;highlighter-rouge&quot;&gt;java&lt;/code&gt; et &lt;code class=&quot;highlighter-rouge&quot;&gt;maven&lt;/code&gt; au &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt;.  Ces ajouts seront retirés à la sortie du répertoire:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# je rentre dans mon répertoire demo-direnv&lt;/span&gt;
~/workspaces &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;demo-direnv
direnv: loading ~/workspaces/demo-direnv/.envrc
direnv: &lt;span class=&quot;nb&quot;&gt;export&lt;/span&gt; +JAVA_HOME +MAVEN_HOME ~PATH

&lt;span class=&quot;c&quot;&gt;# le $PATH a été modifié&lt;/span&gt;
~/workspaces/demo-direnv &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; java &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt;
openjdk 17.0.1 2021-10-19
OpenJDK Runtime Environment Temurin-17.0.1+12 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;build 17.0.1+12&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
OpenJDK 64-Bit Server VM Temurin-17.0.1+12 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;build 17.0.1+12, mixed mode, sharing&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# je sors du répertoire&lt;/span&gt;
~/workspaces/demo-direnv &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ..
direnv: unloading

&lt;span class=&quot;c&quot;&gt;# le $PATH ne contient plus la commande java&lt;/span&gt;
~/workspaces &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; java &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt;
zsh: &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;not found: java
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Avec &lt;code class=&quot;highlighter-rouge&quot;&gt;direnv&lt;/code&gt;, je peux donc changer de version de &lt;code class=&quot;highlighter-rouge&quot;&gt;java&lt;/code&gt; dans mon &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt;, simplement en changeant de répertoire.&lt;/p&gt;
&lt;h2 id=&quot;utilisation-avancée&quot;&gt;Utilisation avancée&lt;/h2&gt;
&lt;p&gt;Pour aller plus loin, &lt;code class=&quot;highlighter-rouge&quot;&gt;direnv&lt;/code&gt; propose une librairie de fonctions qu’ils nomment &lt;em&gt;stdlib&lt;/em&gt;. Ces fonctions sont listées et documentées dans la documentation de direnv &lt;a href=&quot;https://direnv.net/man/direnv-stdlib.1.html&quot; target=&quot;_blank&quot;&gt;man/direnv-stdlib.1&lt;/a&gt;.
Voici quelques unes de ces commandes que j’utilise régulièrement.&lt;/p&gt;
&lt;h3 id=&quot;source_up&quot;&gt;&lt;a href=&quot;https://direnv.net/man/direnv-stdlib.1.html#codesourceup-ltfilenamegtcode&quot; target=&quot;_blank&quot;&gt;source_up&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Cette commande permet d’aller chercher et exécuter le premier fichier &lt;code class=&quot;highlighter-rouge&quot;&gt;.envrc&lt;/code&gt; dans l’arborescence remontante des fichiers, ce qui permet de factoriser un peu le contenu de mes fichiers &lt;code class=&quot;highlighter-rouge&quot;&gt;.envrc&lt;/code&gt;.
Un exemple concret d’arborescence de fichiers:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
└── workspaces
    ├── .envrc
    ├── projet-java-11
    │   └── .envrc
    └── projet-java-17
        └── .envrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Le fichier &lt;code class=&quot;highlighter-rouge&quot;&gt;~/workspaces/.envrc&lt;/code&gt; contient les variables communes à mes deux projets:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;MAVEN_HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/opt/apache-maven-3.8.4
PATH_add &lt;span class=&quot;nv&quot;&gt;$MAVEN_HOME&lt;/span&gt;/bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Le fichier  &lt;code class=&quot;highlighter-rouge&quot;&gt;~/workspaces/projet-java-11/.envrc&lt;/code&gt; contient une configuration pour &lt;em&gt;Java&lt;/em&gt; 11, ainsi que la commande &lt;code class=&quot;highlighter-rouge&quot;&gt;source_up&lt;/code&gt; qui permet de charger le fichier &lt;code class=&quot;highlighter-rouge&quot;&gt;~/workspaces/.envrc&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;source_up
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;JAVA_HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/opt/jdk-11.0.13+8
PATH_add &lt;span class=&quot;nv&quot;&gt;$JAVA_HOME&lt;/span&gt;/bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Le fichier  &lt;code class=&quot;highlighter-rouge&quot;&gt;~/workspaces/projet-java-17/.envrc&lt;/code&gt; contient une configuration similaire pour &lt;em&gt;Java&lt;/em&gt; 17:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;source_up
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;JAVA_HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/opt/jdk-17.0.1+12
PATH_add &lt;span class=&quot;nv&quot;&gt;$JAVA_HOME&lt;/span&gt;/bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Avec cette utilisation, la variable &lt;code class=&quot;highlighter-rouge&quot;&gt;MAVEN_HOME&lt;/code&gt; est disponible dans les sous-répertoires. Cette configuration permet de factoriser mes fichiers &lt;code class=&quot;highlighter-rouge&quot;&gt;.envrc&lt;/code&gt; pour tous mes projets.&lt;/p&gt;
&lt;h3 id=&quot;dotenv&quot;&gt;&lt;a href=&quot;https://direnv.net/man/direnv-stdlib.1.html#codedotenv-ltdotenvpathgtcode&quot; target=&quot;_blank&quot;&gt;dotenv&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;direnv&lt;/code&gt; peut aussi scruter les fichiers &lt;code class=&quot;highlighter-rouge&quot;&gt;.env&lt;/code&gt;, qui doivent exposer les variables d’environnement sous forme de clé/valeur. Les fichiers &lt;code class=&quot;highlighter-rouge&quot;&gt;.env&lt;/code&gt; sont moins souple car aucun script ne peut y être écrit. La commande &lt;code class=&quot;highlighter-rouge&quot;&gt;dotenv&lt;/code&gt; peut néanmoins aider si des &lt;code class=&quot;highlighter-rouge&quot;&gt;.env&lt;/code&gt; existent déjà sur un projet.
Voici un exemple de fichier &lt;code class=&quot;highlighter-rouge&quot;&gt;.env&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;AWS_ACCESS_KEY_ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;xxxx-xxx-xxx-xxxx
&lt;span class=&quot;nv&quot;&gt;AWS_SECRET_ACCESS_KEY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;xxxx-xxx-xxx-xxxx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Et un exemple de fichier &lt;code class=&quot;highlighter-rouge&quot;&gt;.envrc&lt;/code&gt; qui charge le fichier &lt;code class=&quot;highlighter-rouge&quot;&gt;.env&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dotenv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Dans le cas où beaucoup de projets utilisent des &lt;code class=&quot;highlighter-rouge&quot;&gt;.env&lt;/code&gt;, on peut aussi configurer &lt;code class=&quot;highlighter-rouge&quot;&gt;direnv&lt;/code&gt; pour charger ces fichiers automatiquement, en plus des &lt;code class=&quot;highlighter-rouge&quot;&gt;.envrc&lt;/code&gt; (qui restent chargés en priorité)
Cette configuration se fait dans &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.config/direnv/direnv.toml&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-toml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;[global]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;load_dotenv&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;whitelist&quot;&gt;&lt;a href=&quot;https://direnv.net/man/direnv.toml.1.html#whitelist&quot; target=&quot;_blank&quot;&gt;whitelist&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Par défaut, pour chaque fichier &lt;code class=&quot;highlighter-rouge&quot;&gt;.envrc&lt;/code&gt;, nouveau ou modifié, &lt;code class=&quot;highlighter-rouge&quot;&gt;direnv&lt;/code&gt; affichera ce message:&lt;/p&gt;
&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;direnv: error .envrc is blocked. Run `direnv allow` to approve its content
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Il faut donc utiliser la commande &lt;code class=&quot;highlighter-rouge&quot;&gt;direnv allow&lt;/code&gt; pour autoriser ces fichiers. Cela peut être assez rébarbatif quand cela arrive sur de nombreux projets.
&lt;code class=&quot;highlighter-rouge&quot;&gt;direnv&lt;/code&gt; fournit une configuration permettant de whitelister les fichiers et de les autoriser automatiquement. J’y ai ajouté mon répertoire de travail. Cette configuration se fait dans &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.config/direnv/direnv.toml&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-toml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;[whitelist]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;prefix&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;[&quot;/home/jwittouck/workspaces&quot;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;fonction-customisées&quot;&gt;Fonction customisées&lt;/h3&gt;
&lt;p&gt;Pour améliorer l’exemple plus haut concernant la gestion de la variable &lt;code class=&quot;highlighter-rouge&quot;&gt;JAVA_HOME&lt;/code&gt;, il est aussi possible d’enrichir les fonctions disponibles de &lt;code class=&quot;highlighter-rouge&quot;&gt;direnv&lt;/code&gt;.
Pour cela, il faut les ajouter au fichier &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.config/direnv/direnvrc&lt;/code&gt;.
Pour mon usage, j’ai créé cette fonction :&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;use_java&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Using Java version &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;JAVA_HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;find /opt &lt;span class=&quot;nt&quot;&gt;-maxdepth&lt;/span&gt; 1 &lt;span class=&quot;nt&quot;&gt;-type&lt;/span&gt; d &lt;span class=&quot;nt&quot;&gt;-name&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;jdk-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;*&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Loading JAVA_HOME &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$JAVA_HOME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    PATH_add &lt;span class=&quot;nv&quot;&gt;$JAVA_HOME&lt;/span&gt;/bin
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Tous mes JDK sont installés dans &lt;code class=&quot;highlighter-rouge&quot;&gt;/opt&lt;/code&gt;. Cette fonction permet de trouver le JDK qui correspond au premier paramètre de la fonction et de positionner les variables &lt;code class=&quot;highlighter-rouge&quot;&gt;JAVA_HOME&lt;/code&gt; et &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt;.
Elle s’utilise dans un &lt;code class=&quot;highlighter-rouge&quot;&gt;.envrc&lt;/code&gt; de cette manière:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;use_java 17
&lt;span class=&quot;c&quot;&gt;# ou&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# use_java 11&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;et voici ce que loggue &lt;code class=&quot;highlighter-rouge&quot;&gt;direnv&lt;/code&gt; à l’entrée du répertoire :&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~/workspaces &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;demo-direnv
direnv: loading ~/workspaces/demo-direnv/.envrc
direnv: using java 17
Using Java version 17
Loading JAVA_HOME /opt/jdk-17.0.1+12
direnv: &lt;span class=&quot;nb&quot;&gt;export&lt;/span&gt; +JAVA_HOME +MAVEN_HOME ~PATH
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;direnv&lt;/code&gt; est un outil très pratique pour manipuler les variables d’environnement. Il s’adresse avant tout à ceux qui passent du temps dans un shell, devs ou sysadmins.
Cet article a présenté principalement les usages que j’en ai pour mes projets &lt;em&gt;Java&lt;/em&gt;, mais &lt;code class=&quot;highlighter-rouge&quot;&gt;direnv&lt;/code&gt; propose aussi des fonctions pour les projets &lt;code class=&quot;highlighter-rouge&quot;&gt;node&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ruby&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;python&lt;/code&gt; et d’autres.
C’est vite devenu un indispensable dans mes shells.&lt;/p&gt;
&lt;h3 id=&quot;liens&quot;&gt;Liens&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;la page d’accueil du projet sur &lt;a href=&quot;https://direnv.net/&quot; target=&quot;_blank&quot;&gt;direnv.net&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;le repository Github du projet &lt;a href=&quot;https://github.com/direnv/direnv&quot; target=&quot;_blank&quot;&gt;direnv/direnv&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;la documentation d’install &lt;a href=&quot;https://direnv.net/docs/installation.html&quot; target=&quot;_blank&quot;&gt;docs/installation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;la documentation de la stdlib &lt;a href=&quot;https://direnv.net/man/direnv-stdlib.1.html&quot; target=&quot;_blank&quot;&gt;man/direnv-stdlib&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>[&quot;julien_wittouck&quot;]</name></author><category term="Devops" /><summary type="html">Je suis le genre de développeur qui travaille toujours avec un terminal ouvert sur le côté, en plus de mon IDE. Je lance souvent des commandes mvn pour m’assurer que mon projet compile et que mes tests s’exécutent correctement. C’est un vieux réflexe qui date de l’époque où les IDE n’avaient qu’un support limité de Maven. Lancer ces commandes hors-IDE m’aide souvent à valider que tout fonctionnera bien dans un environnement de CI par exemple. J’ai donc parfois besoin de changer de version de Java en fonction du projet dans lequel je me trouve. Maven utilise la variable d’environnement JAVA_HOME pour localiser l’installation de Java à utiliser. Donc être capable de charger des variables d’environnement différentes en fonction d’un projet peut s’avérer pratique. Un autre usage courant consiste à venir charger des clé d’API ou des secrets d’accès cloud comme des variables AWS_ACCESS_KEY ou autres en fonction de mes différents projets. direnv (lien) est un outil écrit en go qui permet de charger des variables d’environnement dans la session courante du terminal, lorsqu’on change de répertoire en effectuant un cd .</summary></entry><entry><title type="html">Web Assembly</title><link href="/articles/front-end/web-assembly/" rel="alternate" type="text/html" title="Web Assembly" /><published>2022-10-06T02:00:00-05:00</published><updated>2022-10-06T02:00:00-05:00</updated><id>/articles/front-end/web-assembly</id><content type="html" xml:base="/articles/front-end/web-assembly/">&lt;h5 id=&quot;boostez-vos-applis-web-avec-web-assembly--&quot;&gt;Boostez vos applis web avec Web Assembly ! &lt;br /&gt;&lt;/h5&gt;

&lt;p&gt;Web Assembly (ou WASM) est un standard du World Wide Web consistant en un &lt;a href=&quot;#bytecode&quot;&gt;bytecode&lt;/a&gt; exécuté côté navigateur dans un environnement dédié (sandbox) en complément du Javascript (JS).&lt;/p&gt;

&lt;p&gt;Ce code bas niveau étant interprété côté navigateur peut être écrit dans différents langages comme le C, C++, RUST, x86 etc.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;L’interprétation du Web Assembly se fait plus bas-niveau que celle du Javascript. Web Assembly utilise de manière plus efficace et directe les ressources disponibles sur la machine sur laquelle il s’exécute (CPU/Mémoire), et permet donc d’atteindre un haut niveau de performances.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Ces performances accrues permettent alors de développer des applications qui n’étaient pas envisageables en Javascript. Par exemple du traitement vidéo en temps réel, comme le floutage d’arrière plan en visio-conférence, ou encore des jeux vidéo.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Pour résumer, WASM a été créé pour tirer parti de la puissance des langages de bas niveau, couplé à la flexibilité de Javascript afin de créer des applications Web plus performantes.&lt;/p&gt;

&lt;!--END_SUMMARY--&gt;

&lt;h2 id=&quot;un-peu-de-contexte&quot;&gt;Un peu de contexte&lt;/h2&gt;

&lt;p&gt;WASM fut officiellement lancé en 2015 pour la première fois sous forme d’une démonstration faite sous Unity (moteur de jeu multi plateforme) afin de démontrer les performances et les possibilités de l’outil.&lt;/p&gt;

&lt;p&gt;Mozilla a sorti asm.js, le 21 mars 2013, un sous-ensemble du langage JS pour améliorer les performances grâce à une couche de traitement binaire. 
Google et Lars Bak ont mis en place un moteur JS V8, le 2 septembre 2008, qui peut compiler nativement vers de l’assembleur.
Ces deux derniers événements sont surtout des améliorations liées à la gestion du langage.&lt;/p&gt;

&lt;h2 id=&quot;objectifs&quot;&gt;Objectifs&lt;/h2&gt;

&lt;p&gt;Les objectifs du WASM sont:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;b&gt;la rapidité&lt;/b&gt; : avoir des performances proches des applications natives (C/C++/Rust) tout en fonctionnant sur un navigateur Web..&lt;/li&gt;
  &lt;li&gt;&lt;b&gt;la portabilité&lt;/b&gt; : WebAssembly est conçu de manière à s’associer aux autres technologies web mais aussi de garantir une rétro compatibilité ascendante entre les différentes versions.&lt;br /&gt;
Il existe aussi des polyfills pour les navigateurs plus anciens.&lt;/li&gt;
  &lt;li&gt;&lt;b&gt;la sécurité&lt;/b&gt; : l’environnement dédié permet de garantir une isolation totale du code et de la machine de l’utilisateur.
Par exemple, la partie entrée / sortie (réseau et fichier) est totalement inaccessible (en dehors du module qui l’embarque).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;la-compilation&quot;&gt;La compilation&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/articles/front-end/web-assembly//image-1.jpg&quot; alt=&quot;image&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Fig: Le processus de compilation Web Assembly &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Afin d’exécuter du Web Assembly dans une page web, il faut compiler du code écrit dans un langage source (écrit en C, C++, Rust ou autre) vers un code intermédiaire (le bytecode WASM). Le bytecode est situé entre le code d’un langage source et le code machine (binaire).
Cela est rendu possible grâce à une infrastructure de compilation &lt;a href=&quot;#llvm&quot;&gt;LLVM&lt;/a&gt;, qui implémente la traduction d’un AST (&lt;a href=&quot;#syntaxeTree&quot;&gt;arbre de syntaxe abstraite&lt;/a&gt;) en bytecode WASM. &lt;br /&gt;
Le fichier ainsi compilé aura pour extension ‘.wasm’.&lt;/p&gt;

&lt;p&gt;L’utilisation d’une LLVM permet d’isoler et d’uniformiser la compilation de tous les langages sources supportés vers ce format. Pour ajouter le support d’un langage, il suffit d’implémenter un programme capable de lire un AST pour le transmettre à la LLVM (transpilateur).&lt;br /&gt;
Il est donc possible de créer des compilateurs pour n’importe quel langage. (une liste des langages principaux déjà supportés par WASM se trouve sur le Discord de sa communauté.)&lt;/p&gt;

&lt;p&gt;Fonctionnement général du Web Assembly&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/articles/front-end/web-assembly//image-2.jpg&quot; alt=&quot;image&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Le code initialement écrit dans un langage haut-niveau est donc compilé dans en un module web-assembly. La compilation produit un fichier binaire ‘.wasm’ contenant le bytecode devant être exécuté dans le navigateur web de l’utilisateur. Les fichiers ‘.wasm’ peuvent alors être distribués aux utilisateurs comme le reste des ressources statiques d’une application web.&lt;/p&gt;

&lt;p&gt;Lorsqu’un utilisateur consulte l’application web, les ressources statiques (HTML, CSS, Images) sont téléchargées par son navigateur, ainsi que le code Javascript et les binaires ‘.wasm’. Le navigateur se charge de décoder, compiler et exécuter le code WASM, en parallèle du code Javascript habituel.&lt;/p&gt;

&lt;h2 id=&quot;les-concepts&quot;&gt;Les concepts&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Intégration sur le web
WebAssembly est conçu de manière à facilement s’associer aux autres technologies web et de garantir une rétrocompatibilité.&lt;/li&gt;
  &lt;li&gt;Le fichier compilé est téléchargé, l’exécution est faite nativement sur le poste de l’utilisateur et la mémoire est gérée de manière linéaire.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Bien que l’exécution ait lieu sur le poste de l’utilisateur, WASM ne permet pas l’accès à certains composants du &lt;a href=&quot;#kernel&quot;&gt;kernel&lt;/a&gt; : Il existe une limite sur la gestion des entrées/sorties. (pour des raisons de sécurité)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Mémoire linéaire
La mémoire linéaire est une seule plage d’adresse mémoire sur laquelle on peut agir au fil de l’eau. Vu l’abstraction du sujet, il est mieux de pouvoir se représenter tout ça. Voici un parallèle entre la manière dont est gérée la mémoire en Java (de Jakob Jenkov) et un schéma de la mémoire linéaire (de Meghalee Goswami) :&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/articles/front-end/web-assembly//image-3.jpg&quot; alt=&quot;image&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Avant d’aller à la suite un petit aparté : WASM a mis en place un traducteur du fichier compilé nommé &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/WebAssembly/Understanding_the_text_format&quot;&gt;Web Assembly Text (WAT)&lt;/a&gt;. Le fichier compilé est donc lisible&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Module 
Représente un binaire WASM qui a été compilé en code exécutable par le navigateur.&lt;/li&gt;
  &lt;li&gt;Table 
Représente un tableau typé de référence ne pouvant être stocké de manière brute en mémoire (pour des raisons de sécurité et de portabilité).&lt;/li&gt;
  &lt;li&gt;Instance
Représente un module associé ainsi que ses états (la mémoire, la table ainsi qu’un ensemble de données importées).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;les-cas-dusage-de-wasm&quot;&gt;Les cas d’usage de WASM&lt;/h2&gt;

&lt;p&gt;Comme expliqué en introduction, WASM permet un haut niveau de performances impossible en Javascript. Ces performances ouvrent la possibilité d’implémenter de nouveaux cas d’usage. Certains de ces cas d’usage sont concrets et déjà mis en place dans certaines applications et jeux. D’autres cas d’usage sont plutôt de l’ordre du POC (Proof Of Concept) ou de la démo : &lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Server-side rendering&lt;/li&gt;
  &lt;li&gt;OCI (Open Container Initiative)&lt;/li&gt;
  &lt;li&gt;3D Web View Rendering&lt;/li&gt;
  &lt;li&gt;Étendre des fonctions JS&lt;/li&gt;
  &lt;li&gt;Extensions navigateurs (ublock origin)&lt;/li&gt;
  &lt;li&gt;Utilisation de la 3D&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Voici des exemples d’applications connues faites à l’aide de WASM : &lt;br /&gt;
&lt;a href=&quot;https://www.figma.com/fr/blog/webassembly-cut-figmas-load-time-by-3x/&quot;&gt;Figma&lt;/a&gt;, &lt;a href=&quot;https://madewithwebassembly.com/showcase/google-earth&quot;&gt;Google Earth&lt;/a&gt;, &lt;a href=&quot;https://madewithwebassembly.com/showcase/unity&quot;&gt;Unity&lt;/a&gt;, &lt;a href=&quot;https://madewithwebassembly.com/showcase/tensorflow&quot;&gt;Unity&lt;/a&gt;, etc.&lt;/p&gt;

&lt;h3 id=&quot;pros&quot;&gt;Pros&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Performance&lt;/li&gt;
  &lt;li&gt;Cross platform&lt;/li&gt;
  &lt;li&gt;Sécurisation&lt;/li&gt;
  &lt;li&gt;multiples langages Rust / C++ / C etc.&lt;/li&gt;
  &lt;li&gt;Portabilité&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;cons&quot;&gt;Cons&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Communauté faible&lt;/li&gt;
  &lt;li&gt;Beaucoups de concepts complexe à appréhender avant de pouvoir faire la moindre chose&lt;/li&gt;
  &lt;li&gt;N’a pas encore percé malgré son “âge”&lt;/li&gt;
  &lt;li&gt;Installation plus ou moins aisée en fonction de la plateforme de développement&lt;/li&gt;
  &lt;li&gt;Pas “user friendly”&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Le principal but de WASM est d’apporter un enrichissement de la stack technique de Javascript avec un haut niveau de performances.
La plus grande difficulté de WASM reste d’assimiler ses différents principes et concepts généraux&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;devoir utiliser un langage de bas niveau&lt;/li&gt;
  &lt;li&gt;utiliser un compilateur&lt;/li&gt;
  &lt;li&gt;avoir affaire à une communauté de niche&lt;/li&gt;
  &lt;li&gt;assez complexe à appréhender
Malgré une adoption encore faible, il n’en reste pas moins fiable que ce soit en termes de sécurité, de performance, de lisibilité et dans certains domaines la seule solution possible afin de garantir un haut niveau de performance sur une application Web.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;lexique&quot;&gt;Lexique&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;b&gt;&lt;a name=&quot;bytecode&quot;&gt;bytecode:&lt;/a&gt;&lt;/b&gt; En informatique, le bytecode (terme anglais signifiant « code en bytes ») est un code intermédiaire entre les instructions machines et le code source, qui n’est pas directement exécutable. Le bytecode (également appelé code portable ou p-code) peut être créé à la volée et résider en mémoire (compilation à la volée, JIT en anglais) ou bien résider dans un fichier, généralement binaire qui représente le programme, tout comme un fichier de code objet produit par un compilateur.
&lt;a href=&quot;https://fr.wikipedia.org/wiki/Bytecode&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;b&gt;&lt;a name=&quot;syntaxeTree&quot;&gt;Arbre de syntaxe abstraite:&lt;/a&gt;&lt;/b&gt; Un arbre de syntaxe abstraite (AST) est une manière de représenter la syntaxe d’un langage de programmation sous la forme d’une structure arborescente hiérarchique. Cette structure est utilisée pour générer des tables de symboles pour les compilateurs et la génération de code ultérieure. L’arbre représente toutes les constructions du langage et leurs règles ultérieures.
&lt;a href=&quot;https://definir-tech.com/arbre-de-syntaxe-abstraite-ast/&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;b&gt;&lt;a name=&quot;llvm&quot;&gt;LLVM:&lt;/a&gt;&lt;/b&gt; LLVM (anciennement appelé Low Level Virtual Machine en français : « machine virtuelle de bas niveau ») est une infrastructure de compilateur conçue pour l’optimisation du code à la compilation, à l’édition de liens, voire à l’exécution ou durant les « temps morts » d’un programme, quel que soit le langage d’origine.
LLVM permet de créer une machine virtuelle pour des langages similaires à Java et sa JVM, un générateur de code pour une architecture matérielle spécifique, et des optimiseurs de compilation indépendants de toute plate-forme et de tout langage.
&lt;a href=&quot;https://fr.wikipedia.org/wiki/LLVM&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;b&gt;&lt;a name=&quot;kernel&quot;&gt;Kernel:&lt;/a&gt;&lt;/b&gt; terme anglais signifiant « noyau ». Il constitue le cœur du système qui exploite un ordinateur. Il établit la communication entre la partie matérielle et la partie logicielle de l’appareil.
&lt;a href=&quot;https://www.jedha.co/blog/kernel-definition-utilite&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;sources&quot;&gt;Sources&lt;/h2&gt;

&lt;p&gt;The state of WebAssembly (2022)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://tech.mozfr.org/post/2017/03/08/D-ou-vient-la-rapidite-de-WebAssembly&quot;&gt;https://tech.mozfr.org/post/2017/03/08/D-ou-vient-la-rapidite-de-WebAssembly&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/fr/docs/&quot;&gt;https://developer.mozilla.org/fr/docs/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://emscripten.org/&quot;&gt;https://emscripten.org/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/fr/docs/&quot;&gt;https://developer.mozilla.org/fr/docs/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jenkov.com/tutorials/java-concurrency/java-memory-model.html&quot;&gt;https://jenkov.com/tutorials/java-concurrency/java-memory-model.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=hSeB9I_mK6A&amp;amp;t=4s&quot;&gt;Angry Bots Démo&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://discord.gg/3B8QFXkYTc&quot;&gt;lien discord Wasm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://madewithwebassembly.com/&quot;&gt;Applications faite en WASM&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://radu-matei.com/blog/wasm-to-oci/&quot;&gt;OCI (Open Container Initiative)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://study.com/academy/lesson/what-is-the-linear-memory-model-definition-constraints.html&quot;&gt;schéma mémoire linéaire de Meghalee Goswami&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>[&quot;laurent_duchaussoy&quot;, &quot;florian_barbet&quot;, &quot;jean_dusenne&quot;]</name></author><category term="Front-End" /><summary type="html">Boostez vos applis web avec Web Assembly ! Web Assembly (ou WASM) est un standard du World Wide Web consistant en un bytecode exécuté côté navigateur dans un environnement dédié (sandbox) en complément du Javascript (JS). Ce code bas niveau étant interprété côté navigateur peut être écrit dans différents langages comme le C, C++, RUST, x86 etc. L’interprétation du Web Assembly se fait plus bas-niveau que celle du Javascript. Web Assembly utilise de manière plus efficace et directe les ressources disponibles sur la machine sur laquelle il s’exécute (CPU/Mémoire), et permet donc d’atteindre un haut niveau de performances. Ces performances accrues permettent alors de développer des applications qui n’étaient pas envisageables en Javascript. Par exemple du traitement vidéo en temps réel, comme le floutage d’arrière plan en visio-conférence, ou encore des jeux vidéo. Pour résumer, WASM a été créé pour tirer parti de la puissance des langages de bas niveau, couplé à la flexibilité de Javascript afin de créer des applications Web plus performantes.</summary></entry><entry><title type="html">Exécuter une application localement sur minikube avec skaffold</title><link href="/articles/devops/skaffold-et-minikube/" rel="alternate" type="text/html" title="Exécuter une application localement sur minikube avec skaffold" /><published>2022-07-29T00:00:00-05:00</published><updated>2022-07-29T00:00:00-05:00</updated><id>/articles/devops/skaffold-et-minikube</id><content type="html" xml:base="/articles/devops/skaffold-et-minikube/">&lt;p&gt;Lors du développement d’une application pour Kubernetes, le développeur est souvent lié à une boucle de feedback assez longue:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Développement&lt;/li&gt;
  &lt;li&gt;Contruction de l’image Docker (quelques secondes/minutes)&lt;/li&gt;
  &lt;li&gt;Push de l’image sur un registry&lt;/li&gt;
  &lt;li&gt;Déploiement sur Kubernetes (quelques minutes)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Cette boucle est généralement implémentée par des pipelines de CI/CD. Ces pipelines augmentent encore le temps entre le développement et une application démarrée sur Kubernetes. Ce temps est relativement long lorsqu’on compare un cycle de développement local auquel un développeur peut être habitué.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://skaffold.dev&quot; target=&quot;_blank&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;skaffold&lt;/code&gt;&lt;/a&gt;, développé par Google, est un outil open-source en license Apache, qui permet d’implémenter cette boucle de développement sur un environnement Kubernetes local ou distant. La promesse de &lt;code class=&quot;highlighter-rouge&quot;&gt;skaffold&lt;/code&gt; est de rendre le développement sur Kubernetes simple, rapide et reproductible.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/articles/devops/skaffold-et-minikube//skaffold.png&quot; alt=&quot;la page d'accueil de skaffold&quot; /&gt;&lt;/p&gt;

&lt;!--END_SUMMARY--&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;skaffold&lt;/code&gt; implémente un &lt;em&gt;pipeline&lt;/em&gt; qui se déroule en plusieurs étapes:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;em&gt;build&lt;/em&gt; : construction des images docker avec:
    &lt;ul&gt;
      &lt;li&gt;Docker (sur base d’un &lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt;)&lt;/li&gt;
      &lt;li&gt;Buildpacks&lt;/li&gt;
      &lt;li&gt;Jib&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;em&gt;tag&lt;/em&gt; de l’image docker en utilisant différentes stratégies :
    &lt;ul&gt;
      &lt;li&gt;l’identifiant du commit git (par défaut)&lt;/li&gt;
      &lt;li&gt;une date&lt;/li&gt;
      &lt;li&gt;des variables d’environnement&lt;/li&gt;
      &lt;li&gt;un hash des fichiers source
      * push de l’image sur un registry
      * chargement direct de l’image dans un cluster Kubernetes&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;em&gt;deploy&lt;/em&gt; : déploiement de l’application sur Kubernetes (local ou distant) en utilisant:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl&lt;/code&gt; et des fichiers yaml&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;kustomize&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;helm&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;em&gt;tail logs &amp;amp; port forward&lt;/em&gt; : affiche les logs de l’application et redirige un port local&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;status check&lt;/em&gt; : attend la fin du bon déploiement de application&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;skaffold&lt;/code&gt; a besoin d’un code à déployer, ainsi qu’un accès à un cluster Kubernetes. L’accès au cluster se configure de la même manière que pour &lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl&lt;/code&gt;, à travers un fichier &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.kube/config&lt;/code&gt;. Pour la suite de cet article, j’utilise un cluster &lt;code class=&quot;highlighter-rouge&quot;&gt;minikube&lt;/code&gt; que j’installe sur mon poste pour l’occasion.&lt;/p&gt;

&lt;h2 id=&quot;déployer-un-cluster-minikube-localement&quot;&gt;Déployer un cluster minikube localement&lt;/h2&gt;
&lt;p&gt;La première étape consiste à déployer un cluster &lt;code class=&quot;highlighter-rouge&quot;&gt;minikube&lt;/code&gt; sur mon poste de développement.
Pour ce faire, le plus pratique est de suivre les étapes d’installation de l’outil détaillées &lt;a href=&quot;https://minikube.sigs.k8s.io/docs/start/&quot; target=&quot;_blank&quot;&gt;dans leur documentation d’installation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/articles/devops/skaffold-et-minikube//minikube-install.png&quot; alt=&quot;installation de minikube&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Voici les commandes que j’ai exécuté pour installer &lt;code class=&quot;highlighter-rouge&quot;&gt;minikube&lt;/code&gt; sur mon poste Linux :&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-LO&lt;/span&gt; https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
&lt;span class=&quot;nb&quot;&gt;sudo install &lt;/span&gt;minikube-linux-amd64 /usr/local/bin/minikube
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker&lt;/code&gt; étant déjà installé sur mon poste, je peux tout de suite démarrer un cluster Kubernetes local avec la commande &lt;code class=&quot;highlighter-rouge&quot;&gt;minikube start&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;minikube start
😄  minikube v1.24.0 on Debian bookworm/sid
🎉  minikube 1.26.0 is available! Download it: https://github.com/kubernetes/minikube/releases/tag/v1.26.0
💡  To disable this notice, run: &lt;span class=&quot;s1&quot;&gt;'minikube config set WantUpdateNotification false'&lt;/span&gt;

✨  Using the docker driver based on existing profile
👍  Starting control plane node minikube &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;cluster minikube
🚜  Pulling base image ...
🔄  Restarting existing docker container &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;minikube&quot;&lt;/span&gt; ...

🧯  Docker is nearly out of disk space, which may cause deployments to fail! &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;92% of capacity&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
💡  Suggestion: 

    Try one or more of the following to free up space on the device:
    
    1. Run &lt;span class=&quot;s2&quot;&gt;&quot;docker system prune&quot;&lt;/span&gt; to remove unused Docker data &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;optionally with &lt;span class=&quot;s2&quot;&gt;&quot;-a&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    2. Increase the storage allocated to Docker &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;Desktop by clicking on:
    Docker icon &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; Preferences &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; Resources &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; Disk Image Size
    3. Run &lt;span class=&quot;s2&quot;&gt;&quot;minikube ssh -- docker system prune&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;using the Docker container runtime
🍿  Related issue: https://github.com/kubernetes/minikube/issues/9024

🐳  Preparing Kubernetes v1.22.3 on Docker 20.10.8 ...
🔎  Verifying Kubernetes components...
    ▪ Using image gcr.io/k8s-minikube/storage-provisioner:v5
    ▪ Using image k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1
    ▪ Using image k8s.gcr.io/ingress-nginx/controller:v1.0.4
    ▪ Using image k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1
🔎  Verifying ingress addon...
🌟  Enabled addons: storage-provisioner, default-storageclass, ingress
🏄  Done! kubectl is now configured to use &lt;span class=&quot;s2&quot;&gt;&quot;minikube&quot;&lt;/span&gt; cluster and &lt;span class=&quot;s2&quot;&gt;&quot;default&quot;&lt;/span&gt; namespace by default
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Par défaut, &lt;code class=&quot;highlighter-rouge&quot;&gt;minikube&lt;/code&gt; va générer un fichier de configuration pour &lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl&lt;/code&gt; dans &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.kube/config&lt;/code&gt;. La commande &lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl&lt;/code&gt; sera donc immédiatement utilisable:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;kubectl get nodes
NAME       STATUS   ROLES                  AGE    VERSION
minikube   Ready    control-plane,master   1d     v1.22.3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Si la commande &lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl&lt;/code&gt; n’est pas installée, &lt;code class=&quot;highlighter-rouge&quot;&gt;minikube&lt;/code&gt; l’intègre et elle est utilisable de cette manière:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;minikube kubectl get nodes
NAME       STATUS   ROLES                  AGE    VERSION
minikube   Ready    control-plane,master   1d     v1.22.3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Pour ma part, j’ai installé &lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl&lt;/code&gt; avec l’outil de packaging de mon système en suivant &lt;a href=&quot;https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/#install-using-native-package-management&quot; target=&quot;_blank&quot;&gt;cette procédure&lt;/a&gt;.
Une fois que &lt;code class=&quot;highlighter-rouge&quot;&gt;minikube&lt;/code&gt; et &lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl&lt;/code&gt; sont installés, démarrés et configurés, je peux passer à l’installation de &lt;code class=&quot;highlighter-rouge&quot;&gt;skaffold&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;installation-de-skaffold&quot;&gt;Installation de skaffold&lt;/h2&gt;
&lt;p&gt;L’installation de &lt;code class=&quot;highlighter-rouge&quot;&gt;skaffold&lt;/code&gt; est similaire à celle de &lt;code class=&quot;highlighter-rouge&quot;&gt;minikube&lt;/code&gt; et &lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl&lt;/code&gt;.
J’ai suivi la procédure sur &lt;a href=&quot;https://skaffold.dev/docs/install/&quot; target=&quot;_blank&quot;&gt;dans leur documentation&lt;/a&gt; et installé la version Linux avec ces commandes:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-Lo&lt;/span&gt; skaffold https://storage.googleapis.com/skaffold/releases/latest/skaffold-linux-amd64 &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo install &lt;/span&gt;skaffold /usr/local/bin/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;skaffold&lt;/code&gt; est maintenant disponible sur mon poste:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;skaffold version
v1.39.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;configuration-dun-projet&quot;&gt;Configuration d’un projet&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;skaffold&lt;/code&gt; se configure avec un fichier &lt;code class=&quot;highlighter-rouge&quot;&gt;skaffold.yml&lt;/code&gt; à positionner à la racine de votre projet.
J’ai pris pour exemple un projet Micronaut avec lequel je suis en train d’expérimenter:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
├── micronaut-cli.yml
├── mvnw
├── mvnw.bat
├── pom.xml
├── README.md
└── src
    └── main
        ├── java
        │   └── com
        │       └── example
        │           ├── Application.java
        │           └── pokemons
        │               ├── PokemonController.java
        │               ├── Pokemon.java
        │               ├── PokemonRepository.java
        │               └── PokemonService.java
        └── resources
            ├── application.yml
            ├── bootstrap.yml
            └── logback.xml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;La configuration initiale du projet se fait en utilisant la commande &lt;code class=&quot;highlighter-rouge&quot;&gt;skaffold init&lt;/code&gt; . Cette commande propose différentes options (&lt;a href=&quot;https://skaffold.dev/docs/pipeline-stages/init/&quot; target=&quot;_blank&quot;&gt;documentation&lt;/a&gt;) en interactif pour créer son fichier de configuration. Cette étape est plus simple qu’écrire le fichier à la main.
Comme je n’ai pas encore écrit de fichiers manifest Kubernetes pour mon application, &lt;code class=&quot;highlighter-rouge&quot;&gt;skaffold&lt;/code&gt; a une option pour les générer: &lt;code class=&quot;highlighter-rouge&quot;&gt;--generate-manifests&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;La première étape consiste à configurer la phase de &lt;em&gt;build&lt;/em&gt; de l’application, à savoir la construction de l’image docker. Plusieurs options seront proposées, en fonction de ce qui est déjà disponible dans le code : &lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt;, configuration de &lt;code class=&quot;highlighter-rouge&quot;&gt;jib&lt;/code&gt;, ou manifests Kubernetes.
Mon projet Micronaut a déjà une configuration pour &lt;code class=&quot;highlighter-rouge&quot;&gt;jib&lt;/code&gt; dans son &lt;code class=&quot;highlighter-rouge&quot;&gt;pom.xml&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;build&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.google.cloud.tools&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;jib-maven-plugin&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;3.2.1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;skaffold init&lt;/code&gt; me propose alors de paramétrer ma phase de &lt;em&gt;build&lt;/em&gt; avec Buildpacks ou Jib:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;skaffold init &lt;span class=&quot;nt&quot;&gt;--generate-manifests&lt;/span&gt;
? Which builders would you like to create Kubernetes resources &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;?  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Use arrows to move, space to &lt;span class=&quot;k&quot;&gt;select&lt;/span&gt;, &amp;lt;right&amp;gt; to all, &amp;lt;left&amp;gt; to none, &lt;span class=&quot;nb&quot;&gt;type &lt;/span&gt;to filter]
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;  Buildpacks &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;pom.xml&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;  Jib Maven Plugin &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;com.example:demo-app-pokemon-micronaut, pom.xml&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Je choisis l’option &lt;em&gt;Jib&lt;/em&gt; étant donné que ce plugin est déjà configuré pour mon application.&lt;/p&gt;

&lt;p&gt;L’étape suivante propose de configurer un port à forwarder pour mon image Docker, je saisis le port 8080 qui est le port par défaut de mon application:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;? Select port to forward &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;pom-xml-image &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;leave blank &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;none&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: 8080
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;skaffold&lt;/code&gt; me propose ensuite un manifest Kubernetes et me demande si je souhaite générer les fichiers:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;? Do you want to write this configuration, along with the generated k8s manifests, to skaffold.yaml? Yes
Generated manifest deployment.yaml was written
Configuration skaffold.yaml was written
You can now run &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;skaffold build] to build the artifacts
or &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;skaffold run] to build and deploy
or &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;skaffold dev] to enter development mode, with auto-redeploy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;À noter que si des fichiers de déploiement Kubernetes sont déjà présents dans l’application, &lt;code class=&quot;highlighter-rouge&quot;&gt;skaffold&lt;/code&gt; les détecte et les ajoute à sa configuration automatiquement.
Le fichier &lt;code class=&quot;highlighter-rouge&quot;&gt;deployment.yaml&lt;/code&gt; généré pour Kubernetes est simple:&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Service&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;pom-xml-image&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;pom-xml-image&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;8080&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;protocol&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;TCP&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;clusterIP&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;None&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;pom-xml-image&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;apps/v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Deployment&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;pom-xml-image&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;pom-xml-image&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;replicas&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;matchLabels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;pom-xml-image&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;pom-xml-image&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;pom-xml-image&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;pom-xml-image&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;ainsi que le fichier &lt;code class=&quot;highlighter-rouge&quot;&gt;skaffold.yaml&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;skaffold/v2beta29&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Config&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;demo-app-pokemon-micronaut&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;artifacts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;pom-xml-image&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;jib&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;com.example:demo-app-pokemon-micronaut&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;deploy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;kubectl&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;manifests&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;deployment.yaml&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;portForward&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;resourceType&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;service&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;resourceName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;pom-xml-image&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;8080&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Le fichier généré contient de la configuration pour 3 étapes du pipeline de &lt;code class=&quot;highlighter-rouge&quot;&gt;skaffold&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;La phase de &lt;em&gt;build&lt;/em&gt; est bien configurée pour construire une image Docker en utilisant &lt;em&gt;Jib&lt;/em&gt;, l’image produite sera nommée &lt;code class=&quot;highlighter-rouge&quot;&gt;pom-xml-image&lt;/code&gt;. Ce nom par défaut pourra être changé en modifiant ce fichier de configuration.&lt;/p&gt;

&lt;p&gt;La phase de &lt;em&gt;deploy&lt;/em&gt; est configurée pour déployer des manifests Kubernetes, ici le fichier &lt;code class=&quot;highlighter-rouge&quot;&gt;deployment.yaml&lt;/code&gt; qui a été généré par la commande &lt;code class=&quot;highlighter-rouge&quot;&gt;skaffold init&lt;/code&gt;. Ces fichiers manifest référencent l’image &lt;code class=&quot;highlighter-rouge&quot;&gt;pom-xml-image&lt;/code&gt; dans la partie &lt;em&gt;Deployment&lt;/em&gt; du manifest.
On voit donc ici comment on peut adapter cette configuration pour inclure d’autres fichiers, comme une &lt;em&gt;ConfigMap&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;J’ai pris le parti de déplacer les fichiers de manifest Kubernetes générés dans le répertoire &lt;code class=&quot;highlighter-rouge&quot;&gt;src/main/Kubernetes&lt;/code&gt; de mon application et de renommer l’image générée.
Voici la structure de mon application après ces opérations:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
├── micronaut-cli.yml
├── mvnw
├── mvnw.bat
├── pom.xml
├── README.md
├── skaffold.yaml
└── src
    └── main
        ├── java
        │   └── com
        │       └── example
        │           ├── Application.java
        │           └── pokemons
        │               ├── PokemonController.java
        │               ├── Pokemon.java
        │               ├── PokemonRepository.java
        │               └── PokemonService.java
        ├── kubernetes
        │   ├── configMap.yaml
        │   ├── deployment.yaml
        │   └── service.yaml
        └── resources
            ├── application.yml
            ├── bootstrap.yml
            └── logback.xml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Ainsi que le fichier &lt;code class=&quot;highlighter-rouge&quot;&gt;skaffold.yaml&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;skaffold/v2beta29&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Config&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;demo-skaffold&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;artifacts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;demo-skaffold&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;jib&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;deploy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;kubectl&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;manifests&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;src/main/kubernetes/*.yaml&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;portForward&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;resourceType&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;service&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;resourceName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;demo-skaffold&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;8080&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;démarrage-de-mon-projet&quot;&gt;Démarrage de mon projet&lt;/h2&gt;
&lt;p&gt;Une fois les fichiers générés, la commande &lt;code class=&quot;highlighter-rouge&quot;&gt;skaffold dev&lt;/code&gt; va:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;construire l’image docker en utilisant le builder &lt;em&gt;Jib&lt;/em&gt; configuré&lt;/li&gt;
  &lt;li&gt;déposer cette image directement dans l’environnement du &lt;code class=&quot;highlighter-rouge&quot;&gt;minikube&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;déployer les fichiers de configuration Kubernetes&lt;/li&gt;
  &lt;li&gt;ouvrir un port-forward sur mon port d’écoute 8080&lt;/li&gt;
  &lt;li&gt;afficher les logs de mon application dans mon shell&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;skaffold dev   
Listing files to watch...
 - demo-skaffold
Generating tags...
 - demo-skaffold -&amp;gt; demo-skaffold:latest
Some taggers failed. Rerun with &lt;span class=&quot;nt&quot;&gt;-vdebug&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;errors.
Checking cache...
 - demo-skaffold: Found Locally
Tags used &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;deployment:
 - demo-skaffold -&amp;gt; demo-skaffold:275bf648a141313e52f422d73ad69379be4f4d7c3e9e50fe3c16289da8391c33
Starting deploy...
 - configmap/demo-skaffold created
 - deployment.apps/demo-skaffold created
 - service/demo-skaffold created
Waiting &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;deployments to stabilize...
 - deployment/demo-skaffold is ready.
Deployments stabilized &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;2.047 seconds
Port forwarding service/demo-skaffold &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;namespace default, remote port 8080 -&amp;gt; http://127.0.0.1:8080
Press Ctrl+C to &lt;span class=&quot;nb&quot;&gt;exit
&lt;/span&gt;Watching &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;changes...
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;backend]  __  __ _                                  _   
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;backend] |  &lt;span class=&quot;se&quot;&gt;\/&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;_&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; ___ _ __ ___  _ __   __ _ _   _| |_ 
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;backend] | |&lt;span class=&quot;se&quot;&gt;\/&lt;/span&gt;| | |/ __| &lt;span class=&quot;s1&quot;&gt;'__/ _ \| '&lt;/span&gt;_ &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;/ _&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; | | | | __|
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;backend] | |  | | | &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;__| | | &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;_&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; | | | | &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;_| | |_| | |_ 
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;backend] |_|  |_|_|&lt;span class=&quot;se&quot;&gt;\_&lt;/span&gt;__|_|  &lt;span class=&quot;se&quot;&gt;\_&lt;/span&gt;__/|_| |_|&lt;span class=&quot;se&quot;&gt;\_&lt;/span&gt;_,_|&lt;span class=&quot;se&quot;&gt;\_&lt;/span&gt;_,_|&lt;span class=&quot;se&quot;&gt;\_&lt;/span&gt;_|
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;backend]   Micronaut &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;v3.5.1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;backend] 
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;backend] 14:15:41.202 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;main] INFO  i.m.context.env.DefaultEnvironment - Established active environments: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;k8s, cloud]
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;backend] 14:15:41.557 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;main] INFO  io.micronaut.runtime.Micronaut - Startup completed &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;803ms. Server Running: http://demo-skaffold-5bfb47c8fc-cvld4:8080
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/articles/devops/skaffold-et-minikube//localhost.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;En quelques minutes, mon application est démarré sur mon cluster &lt;code class=&quot;highlighter-rouge&quot;&gt;minikube&lt;/code&gt; local.
Je peux voir avec une commande &lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl get all&lt;/code&gt; que mes manifests ont bien été déployés et que mon application tourne:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;kubectl get all
NAME                                 READY   STATUS    RESTARTS   AGE
pod/demo-skaffold-5bfb47c8fc-cvld4   1/1     Running   0          19m

NAME                    TYPE        CLUSTER-IP   EXTERNAL-IP   PORT&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;S&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;    AGE
service/demo-skaffold   ClusterIP   None         &amp;lt;none&amp;gt;        8080/TCP   19m
service/kubernetes      ClusterIP   10.96.0.1    &amp;lt;none&amp;gt;        443/TCP    1d

NAME                            READY   UP-TO-DATE   AVAILABLE   AGE
deployment.apps/demo-skaffold   1/1     1            1           19m

NAME                                       DESIRED   CURRENT   READY   AGE
replicaset.apps/demo-skaffold-5bfb47c8fc   1         1         1       19m

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;skaffold&lt;/code&gt; est aussi capable de faire du &lt;em&gt;hot-reload&lt;/em&gt; sans configuration supplémentaire pour les applications buildées avec &lt;em&gt;jib&lt;/em&gt;.
Il suffit de:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;modifier le code&lt;/li&gt;
  &lt;li&gt;attendre quelques secondes que le code soit re-compilé et l’application est re-démarrée&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Watching &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;changes...
Generating tags...
 - pom-xml-image -&amp;gt; pom-xml-image:latest
Some taggers failed. Rerun with &lt;span class=&quot;nt&quot;&gt;-vdebug&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;errors.
Checking cache...
 - pom-xml-image: Not found. Building
Starting build...
Found &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;minikube] context, using &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;docker daemon.
Building &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;pom-xml-image]...
Target platforms: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;linux/amd64]

...

Build &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;pom-xml-image] succeeded
Tags used &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;deployment:
 - pom-xml-image -&amp;gt; pom-xml-image:c6d646c3c9ba7ac130cfe23c31b2391584b4bddfce984b2cc1f1f2c711c9d509
Starting deploy...
Waiting &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;deployments to stabilize...
 - deployment/pom-xml-image is ready.
Deployments stabilized &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;1.038 second
Port forwarding service/pom-xml-image &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;namespace default, remote port 8080 -&amp;gt; http://127.0.0.1:8080
Watching &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;changes...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;C’est particulièrement pratique pour tester une application localement!
Si je veux arrêter de développer, j’utilise la combinaison de touches &lt;em&gt;CTRL+C&lt;/em&gt;, qui va stopper l’application et faire le ménage sur le cluster Kubernetes:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;^C
Cleaning up...
 - configmap &lt;span class=&quot;s2&quot;&gt;&quot;demo-skaffold&quot;&lt;/span&gt; deleted
 - deployment.apps &lt;span class=&quot;s2&quot;&gt;&quot;demo-skaffold&quot;&lt;/span&gt; deleted
 - service &lt;span class=&quot;s2&quot;&gt;&quot;demo-skaffold&quot;&lt;/span&gt; deleted
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;skaffold&lt;/code&gt; permet de rendre accessible au développeur le déploiement sur un cluster Kubernetes, local ou distant. Cet article a présenté son usage sur un cluster local &lt;code class=&quot;highlighter-rouge&quot;&gt;minikube&lt;/code&gt;, mais &lt;code class=&quot;highlighter-rouge&quot;&gt;skaffold&lt;/code&gt; fonctionne de manière indifférenciée sur un cluster distant. Il permet aussi de réutiliser des fichiers de configuration Kubernetes, Kustomize ou Helm existants, ce qui est très pratique si l’application dispose déjà de ce type de fichiers.&lt;/p&gt;

&lt;p&gt;Le port forward est très bien intégré et pratique à l’usage (pas besoin de taper une commande &lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl&lt;/code&gt; supplémentaire).&lt;/p&gt;

&lt;p&gt;La &lt;a href=&quot;https://skaffold.dev/docs/&quot; target=&quot;_blank&quot;&gt;documentation de &lt;code class=&quot;highlighter-rouge&quot;&gt;skaffold&lt;/code&gt;&lt;/a&gt; est très complète et indique tous les paramètres que chaque phase de son pipeline accepte et fourni aussi des liens vers des tutoriaux.&lt;/p&gt;

&lt;p&gt;Enfin, &lt;code class=&quot;highlighter-rouge&quot;&gt;skaffold&lt;/code&gt; est au coeur des plugins &lt;em&gt;Cloud Code&lt;/em&gt; de Google, pour IntelliJ IDEA et VSCode pour l’exécution et le déploiement des application sur Kubernetes.&lt;/p&gt;

&lt;p&gt;De nombreux &lt;a href=&quot;https://github.com/GoogleContainerTools/skaffold/tree/main/examples&quot; target=&quot;_blank&quot;&gt;exemples&lt;/a&gt; sont disponibles sur le repository Github de &lt;code class=&quot;highlighter-rouge&quot;&gt;skaffold&lt;/code&gt;, il y en aura surement un qui correspondra à votre type de projet si vous voulez expérimenter.&lt;/p&gt;

&lt;h3 id=&quot;liens&quot;&gt;Liens&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;le repository Github de &lt;a href=&quot;https://github.com/GoogleContainerTools/skaffold&quot; target=&quot;_blank&quot;&gt;GoogleContainerTools/skaffold&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;le site web &lt;a href=&quot;https://skaffold.dev/&quot; target=&quot;_blank&quot;&gt;skaffold.dev&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;la &lt;a href=&quot;https://skaffold.dev/docs/&quot; target=&quot;_blank&quot;&gt;documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;les &lt;a href=&quot;https://github.com/GoogleContainerTools/skaffold/tree/main/examples&quot; target=&quot;_blank&quot;&gt;exemples de code sur Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>[&quot;julien_wittouck&quot;]</name></author><category term="Devops" /><category term="kubernetes" /><category term="skaffold" /><category term="minikube" /><category term="docker" /><summary type="html">Lors du développement d’une application pour Kubernetes, le développeur est souvent lié à une boucle de feedback assez longue: Développement Contruction de l’image Docker (quelques secondes/minutes) Push de l’image sur un registry Déploiement sur Kubernetes (quelques minutes) Cette boucle est généralement implémentée par des pipelines de CI/CD. Ces pipelines augmentent encore le temps entre le développement et une application démarrée sur Kubernetes. Ce temps est relativement long lorsqu’on compare un cycle de développement local auquel un développeur peut être habitué. skaffold, développé par Google, est un outil open-source en license Apache, qui permet d’implémenter cette boucle de développement sur un environnement Kubernetes local ou distant. La promesse de skaffold est de rendre le développement sur Kubernetes simple, rapide et reproductible.</summary></entry><entry><title type="html">Design Pattern</title><link href="/articles/other/design-pattern/" rel="alternate" type="text/html" title="Design Pattern" /><published>2022-06-15T02:00:00-05:00</published><updated>2022-06-15T02:00:00-05:00</updated><id>/articles/other/design-pattern</id><content type="html" xml:base="/articles/other/design-pattern/">&lt;h5 id=&quot;lart-de-savoir-utiliser-le-bon-outil-au-bon-moment&quot;&gt;L’art de savoir utiliser le bon outil au bon moment&lt;br /&gt;&lt;/h5&gt;

&lt;p&gt;&lt;img src=&quot;/articles/other/design-pattern//image-pattern.jpg&quot; alt=&quot;image&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Les “Design Patterns”, ou “patrons de conception”, sont un ensemble de solutions reconnues, particulièrement dans la programmation orientée objet, comme étant la meilleure réponse afin de résoudre un problème de conception récurrent.&lt;/p&gt;

&lt;p&gt;Les exemples de patrons peuvent être faits de différentes façons: par le biais de schémas, de pseudo code, la manière d’organiser ses modules ou classes ou à l’aide d’une implémentation proposée.&lt;/p&gt;

&lt;!--END_SUMMARY--&gt;

&lt;h2 id=&quot;doù-viennent-ils-&quot;&gt;D’où viennent-ils ?&lt;/h2&gt;

&lt;p&gt;Nous pouvons être redevable à Christopher Alexander, anthropologue et architecte Américain pour avoir travaillé sur “la théorie des Pattern Languages” permettant des déclinaisons dans des domaines aussi divers que l’histoire de l’art, l’anthropologie…&lt;br /&gt;
Cette façon d’aborder le modèle de conception a été reprise en 1987 par Kent Beck (concepteur d’extrême programming) et Ward Cunningham (inventeur du concept de Wiki) , qui ont décidé d’appliquer ce type de design architectural à l’informatique.&lt;br /&gt;
C’est en 1994, à la suite d’un livre nommé &lt;b&gt;Design Patterns: Elements of Reusable Software&lt;/b&gt; co-écrit par un collectif (GoF pour Gang of Four) et décrivant plus d’une vingtaine de patrons que ce principe fut réellement reconnu.&lt;/p&gt;

&lt;h2 id=&quot;voici-les-différents-types-de-patrons-de-conception-&quot;&gt;Voici les différents types de patrons de conception :&lt;/h2&gt;

&lt;h3 id=&quot;le-patron-de-création-creational-pattern&quot;&gt;&lt;b&gt;Le patron de création&lt;/b&gt; (Creational Pattern)&lt;br /&gt;&lt;/h3&gt;
&lt;p&gt;Il a pour but d’aider à résoudre les problèmes d’instanciation de classes.&lt;/p&gt;

&lt;p&gt;Quelques exemples:&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Singleton&lt;/li&gt;
  &lt;li&gt;Prototype&lt;/li&gt;
  &lt;li&gt;Fabrique (Factory)&lt;/li&gt;
  &lt;li&gt;Fabrique Abstraite (Abstract Factory)&lt;/li&gt;
  &lt;li&gt;Monteur (Builder)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;le-patron-de-structure-structural-pattern&quot;&gt;&lt;b&gt;Le patron de structure&lt;/b&gt; (Structural Pattern)&lt;/h3&gt;
&lt;p&gt;Structurer les classes et objets afin de garder ceux-ci flexibles et efficaces au travers de leur 
structuration et leur interface.&lt;/p&gt;

&lt;p&gt;Quelques exemples:&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Pont (Bridge)&lt;/li&gt;
  &lt;li&gt;Façade&lt;/li&gt;
  &lt;li&gt;Adaptateur (Adapter)&lt;/li&gt;
  &lt;li&gt;Objet composite&lt;/li&gt;
  &lt;li&gt;Proxy&lt;/li&gt;
  &lt;li&gt;Poids-mouche (Flyweight pattern)&lt;/li&gt;
  &lt;li&gt;Décorateur (Decorator)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;le-patron-de-comportement-behavioral-pattern&quot;&gt;&lt;b&gt;Le patron de comportement&lt;/b&gt; (Behavioral Pattern)&lt;/h3&gt;
&lt;p&gt;Permet de modéliser et répartir les responsabilités entre les objets.&lt;/p&gt;

&lt;p&gt;Quelques exemples:&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Chaîne de responsabilité (Chain of Responsibility)&lt;/li&gt;
  &lt;li&gt;Commande (Command)&lt;/li&gt;
  &lt;li&gt;Interpréteur (Interpreter)&lt;/li&gt;
  &lt;li&gt;Itérateur (Iterator)&lt;/li&gt;
  &lt;li&gt;Médiateur (Mediator)&lt;/li&gt;
  &lt;li&gt;Mémento&lt;/li&gt;
  &lt;li&gt;Observateur (Observer)&lt;/li&gt;
  &lt;li&gt;Etat (State)&lt;/li&gt;
  &lt;li&gt;Stratégie (Strategy)&lt;/li&gt;
  &lt;li&gt;Patron de méthode (Template Method Pattern)&lt;/li&gt;
  &lt;li&gt;Visiteur (Visitor)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;quand-et-pourquoi-les-utiliser-&quot;&gt;Quand et pourquoi les utiliser ?&lt;/h2&gt;

&lt;p&gt;Un développeur ayant une culture du Design Pattern (et sachant quand c’est le moment d’en utiliser un) pourra trouver plus rapidement une solution grâce aux différents paradigmes proposés et ayant déjà fait leurs preuves.&lt;/p&gt;

&lt;p&gt;Il permet donc :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;d’accélérer le processus de développement,&lt;/li&gt;
  &lt;li&gt;de réduire les bugs potentiels,&lt;/li&gt;
  &lt;li&gt;de connaître les bonnes pratiques et les pièges à éviter&lt;/li&gt;
  &lt;li&gt;de s’appuyer sur la capitalisation de l’expérience de la communauté.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Il est donc vraiment important de l’intégrer le plus tôt possible dans le processus de conception / développement.&lt;br /&gt;
Un bon développeur devra savoir s’arrêter et remettre en question son code lorsqu’il se retrouve face à un problème.&lt;br /&gt;
Il faudra se demander “Ne suis-je pas en train de réinventer la roue ? N’existe t’il pas un patron qui pourrait répondre à ma problématique ?”&lt;/p&gt;

&lt;h3 id=&quot;quelques-exemples&quot;&gt;Quelques exemples&lt;/h3&gt;

&lt;p&gt;Il existe de nombreux modèles qui sont souvent très utilisés. La plupart du temps beaucoup de développeurs en utilisent sans savoir qu’il s’agit de modèles de patrons de conception.
Voici quelques cas parmis ceux que vous utilisez peut-être sans même le savoir.&lt;/p&gt;

&lt;p&gt;Le &lt;b&gt;Modèle Composite&lt;/b&gt; : pour représenter des structures arborescentes pour présenter des hiérarchies de composants / composés.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/articles/other/design-pattern//dp-1.jpg&quot; alt=&quot;image&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Le &lt;b&gt;Singleton&lt;/b&gt; qui permet de limiter l’instanciation d’une classe à un seul objet.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/articles/other/design-pattern//dp-2.jpg&quot; alt=&quot;image&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Les &lt;b&gt;itérateurs&lt;/b&gt; qui permettent de parcourir les éléments d’une collection (liste, arbre etc.).&lt;/p&gt;

&lt;p&gt;Le &lt;b&gt;Proxy&lt;/b&gt; : substitue une classe à une autre en utilisant la même interface permettant entre autres la sécurité ou l’appel de méthodes à distance.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/articles/other/design-pattern//dp-3.jpg&quot; alt=&quot;image&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Le &lt;b&gt;Décorateur&lt;/b&gt; : attacher dynamiquement des nouvelles responsabilités à un objet&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/articles/other/design-pattern//dp-4.jpg&quot; alt=&quot;image&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Le &lt;b&gt;Façade&lt;/b&gt; pour simplifier l’utilisation d’une interface complète.&lt;/p&gt;

&lt;p&gt;L’&lt;b&gt;Observateur&lt;/b&gt; : mécanisme de souscription afin d’envoyer des notifications à plusieurs objets qui sont observés.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/articles/other/design-pattern//dp-5.jpg&quot; alt=&quot;image&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Le &lt;b&gt;Stratégie&lt;/b&gt; qui permet de créer des algorithmes séparés dans plusieurs classes autonomes / interchangeables.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/articles/other/design-pattern//dp-6.jpg&quot; alt=&quot;image&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Voici un cas d’usage écrit en Typescript pour savoir quand l’utiliser. Imaginons que l’on souhaite faire plusieurs actions différentes mais avec le même objet, nous pourrions être tenté de faire une classe qui contiendrait toutes ces actions? Oui et non, car celà reviendrait à ne pas respecter un des principes du &lt;a href=&quot;https://fr.wikipedia.org/wiki/SOLID_(informatique)&quot;&gt;SOLID&lt;/a&gt; à savoir le “S” pour Single Responsibility Principe.
Prenons le cas d’un site, nous voulons développer une classe qui permet de gérer le paiement.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;Interface&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PaymentStrategy&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;doPay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;nous allons ensuite créer plusieurs classes correspondant aux différents moyens de paiement :&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CreditCardStrategy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PaymentStrategy&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//  ici on fait des traitements différents&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;doPay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;je paye en carte de crédit un total de&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;		
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OtherPaymentStrategy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PaymentStrategy&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;


    &lt;span class=&quot;c1&quot;&gt;//  ici on fait des traitements différents&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;doPay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;je paye en X moyen de paiement un total de&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;		
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Pour finir nous créerons une classe finale qui va permettre d’utiliser notre stratégie.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Cart&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	
	&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getTotalCart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;doPay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PaymentStrategyMethod&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;methodToPay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;methodToPay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;doPay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getTotalCart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Afin d’utiliser tout ça on pourrait imaginer un sélecteur lorsque l’on passe à l’étape du paiement qui permettrait de sélectionner son moyen de paiement préféré.&lt;/p&gt;

&lt;p&gt;exemple :&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;cart&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Cart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;199&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;cart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;doPay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CreditCardStrategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// pour le premier cas&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;cart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;doPay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OtherPaymentStrategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// pour le second cas&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Le &lt;b&gt;Prototype&lt;/b&gt; qui permet de créer de nouveaux objets à partir d’objets existants tout en laissant à la classe le soin du type d’objet à créer.&lt;/p&gt;

&lt;p&gt;La &lt;b&gt;Fabrique&lt;/b&gt; pour instancier des objets dans une classe mère tout en laissant aux sous classes le choix des types d’objets à créer.&lt;/p&gt;

&lt;p&gt;L’ &lt;b&gt;Object Pool&lt;/b&gt; pour économiser le temps d’instanciation et de suppression lorsque de nombreux objets ayant une vie courte seront utilisés.&lt;/p&gt;

&lt;h2 id=&quot;pour-finir&quot;&gt;Pour finir&lt;/h2&gt;

&lt;p&gt;Vous l’aurez compris, le Design Pattern fait partie intégrante des outils indispensables du développeur.&lt;br /&gt; 
Le but de cet article est de vous donner l’envie de vous y intéresser, de lire, de découvrir et surtout d’apprendre à savoir quand les utiliser afin de répondre au mieux à vos besoins.&lt;/p&gt;

&lt;p&gt;Attention toutefois à ne pas tomber dans l’exact contraire, à savoir, l’anti pattern.&lt;br /&gt;
Cela reviendrait à faire le mauvais choix et donc à apporter la mauvaise réponse à une problématique donnée.&lt;/p&gt;

&lt;p&gt;Voici un exemple développé en Java par Maxime, il combine le Pattern Observer et Builder avec comme thème l’organisation de course à pied. &lt;br /&gt;
Lien du repos git : https://github.com/ekit3/design-pattern&lt;/p&gt;

&lt;p&gt;Sources ayant servie à écrire l’article et pour aller plus loin :&lt;/p&gt;

&lt;p&gt;https://fr.wikibooks.org/wiki/Patrons_de_conception
https://ryax.tech/fr/design-pattern-cest-quoi-et-pourquoi-lutiliser/
https://refactoring.guru/
https://madasamy.medium.com/introduction-to-object-oriented-design-patterns-part-i-4e5c7845015b&lt;/p&gt;</content><author><name>[&quot;laurent_duchaussoy&quot;]</name></author><category term="Other" /><summary type="html">L’art de savoir utiliser le bon outil au bon moment Les “Design Patterns”, ou “patrons de conception”, sont un ensemble de solutions reconnues, particulièrement dans la programmation orientée objet, comme étant la meilleure réponse afin de résoudre un problème de conception récurrent. Les exemples de patrons peuvent être faits de différentes façons: par le biais de schémas, de pseudo code, la manière d’organiser ses modules ou classes ou à l’aide d’une implémentation proposée.</summary></entry><entry><title type="html">Les structures algébriques</title><link href="/articles/front-end/algebraic-structure/" rel="alternate" type="text/html" title="Les structures algébriques" /><published>2022-05-18T02:00:00-05:00</published><updated>2022-05-18T02:00:00-05:00</updated><id>/articles/front-end/algebraic-structure</id><content type="html" xml:base="/articles/front-end/algebraic-structure/">&lt;p&gt;Les premiers algorithmes ont été réalisés bien avant que le premier ordinateur ne soit conceptualisé.&lt;br /&gt; 
Le tout premier algorithme connu a été écrit en -300 avant notre ère par Euclide (PGCD).&lt;br /&gt;
Aujourd’hui les mathématiques font rêver, font peur et semblent parfois inaccessibles. Une chose est sûre, elles sont partout.&lt;br /&gt;
Comptables, développeurs, boulangers ou même politiques, tous utilisent les mathématiques : le langage suit un ensemble de règles mathématiques.&lt;br /&gt;
Les structures du langage sont réalisées par l’application d’un arbre de la syntaxe abstraite.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Les structures algébriques font partie des bases des mathématiques. C’est un socle sur lequel de nombreuses règles sont construites.&lt;br /&gt;
En particulier, pour réaliser des applications robustes, performantes et maintenables. Elles peuvent apporter une aide précieuse.&lt;/p&gt;

&lt;!--END_SUMMARY--&gt;

&lt;h4 id=&quot;définition&quot;&gt;Définition:&lt;/h4&gt;

&lt;p&gt;Les structures algébriques sont un ensemble d’entités basées sur des axiomes initiaux à partir desquels il est possible de démontrer un certain nombre de lois.&lt;br /&gt;
L’objectif de ces structures est d’assurer, après avoir vérifié des axiomes simples, la déduction de lois dont il est possible de tirer des conclusions utiles.&lt;br /&gt;
Les premières structures à étudier, les plus simples, sont les magmas et les monoïdes.&lt;/p&gt;

&lt;h3 id=&quot;les-magmas&quot;&gt;Les magmas&lt;/h3&gt;

&lt;p&gt;Les magmas sont les fondations des structures algébriques, le premier niveau. Ils permettent de définir le contexte.&lt;br /&gt;
Cependant, n’ayant que très peu de contraintes, ils ne donnent pas la possibilité d’en déduire beaucoup de lois.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Recette miracle:&lt;/b&gt;&lt;br /&gt;
&lt;b&gt;Pour créer un magma, il faut réunir un ensemble et une loi de composition interne.&lt;/b&gt;
&lt;br /&gt;&lt;br /&gt;
Un ensemble est constitué d’éléments en nombre fini ou non et peut être constitué de différents types d’éléments.&lt;br /&gt;
Par exemple, l’univers est un ensemble contenant des sous-ensembles de planètes, d’étoiles, de trou noirs, etc.&lt;/p&gt;

&lt;p&gt;Une loi de composition interne est une opération entre deux éléments de l’ensemble qui renvoie un élément de ce même ensemble.&lt;br /&gt;
L’opération consistant à mélanger deux pots de peinture crée un autre pot de peinture avec une couleur potentiellement différente.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;CH&lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;C056&lt;/td&gt;
      &lt;td&gt;B084&lt;/td&gt;
      &lt;td&gt;M083&lt;/td&gt;
      &lt;td&gt;C189&lt;/td&gt;
      &lt;td&gt;M356&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Henri a 8 ans, adore les cailloux et ses amis (Charles, Bertrand et Marie), il est aussi un spécialiste des mathématiques.&lt;/p&gt;

&lt;p&gt;Henri possède 5 cailloux et une manière très spéciale de les nommer. Cependant Henri ne donne pas de noms aléatoires. Ses cailloux ont un nom relatif à l’endroit et au jour où ils les trouvent.&lt;br /&gt;
Par exemple Henri a trouvé C056 dans le jardin de son ami Charles, le 56ème jour de l’année.&lt;/p&gt;

&lt;p&gt;CH est un sous-ensemble d’un ensemble. Il est caractérisé par la concaténation d’une lettre et d’une série de chiffres allant de 000 à 365 ; appelons cet ensemble CPH (Cailloux potentiels d’Henri).&lt;/p&gt;

&lt;p&gt;Henri est confronté à un problème, il veut savoir quel est son caillou le plus fort. Il va donc pour cela créer une opération pour lui permettre de s’y retrouver.&lt;/p&gt;

&lt;p&gt;Voici en quoi consiste son opération (selon ses propres mots) :&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Calculer le poids de chaque caillou.&lt;/li&gt;
  &lt;li&gt;Multiplier la position dans l’alphabet de la lettre par le numéro du jour de l’année.
Comparer lequel est le plus gros, si les deux sont égalités le poids de la lettre l’emporte.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Le résultat de l’opération d’Henri a créé ce tableau :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/articles/front-end/algebraic-structure//img-1.jpg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Henri ne le sait pas mais il vient de créer un Magma sur l’ensemble CH.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;L’application du plus fort Caillou v0.1.0&lt;/b&gt;&lt;/p&gt;
&lt;details&gt;
  &lt;p&gt;&lt;b&gt;Configuration requise:&lt;/b&gt;&lt;br /&gt;
Un magma, ne possédant aucune autre propriété que celles susmentionnées, permet deux choses essentielles.&lt;/p&gt;
  &lt;ol&gt;
    &lt;li&gt;Contrôler les limites des entrées&lt;/li&gt;
    &lt;li&gt;Mettre en pratique une analyse séquentielle via une opération (LCI).&lt;/li&gt;
  &lt;/ol&gt;

  &lt;p&gt;Classiquement (sans savoir que c’est un magma) une simple analyse syntaxique sur une chaîne de caractère suffit :&lt;/p&gt;

  &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stronger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cailloux&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputFormat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;[A-Z]([0-2][0-9][0-9]|3([0-5][0-9]|6[0-5]))&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;ToIntFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;letter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;charAt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aCaillou&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cailloux&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aCaillou&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)){&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;is not a Caillou&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;trim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aCaillou&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
       &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weightResult&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;charAt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;substring&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
         &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weightACaillou&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aCaillou&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;charAt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aCaillou&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;substring&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weightResult&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weightACaillou&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weightACaillou&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weightResult&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;letter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;applyAsInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;letter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;applyAsInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aCaillou&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aCaillou&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;

  &lt;p&gt;Ici les cailloux potentiels d’Henri ont une forme très spécifique. Voici le résultat avec un magma :&lt;/p&gt;

  &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Caillou&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;letter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dayOfYear&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Caillou&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dayOfYear&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dayOfYear&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;365&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;is not a Caillou&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;letter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;65&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;letter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;90&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;is not a Caillou&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;letter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dayOfYear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;Caillou&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;strongest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Caillou&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;letter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;letter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Caillou&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stronger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Caillou&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Caillou&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;strongest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Caillou&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Caillou&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;charAt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;substring&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Caillou&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;henrisCaillou&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputList&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Caillou:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Caillou:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stronger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
  &lt;p&gt;&lt;b&gt;Le magma permet de définir le cadre de travail :&lt;/b&gt;&lt;/p&gt;
&lt;/details&gt;
&lt;ul&gt;
  &lt;li&gt;Connaître l’ensemble des éléments sur lesquels les actions sont réalisées.&lt;/li&gt;
  &lt;li&gt;Connaître l’opération qui sera utilisée en s’assurant que le résultat fait partie de l’ensemble
Aucune autre conclusion ne peut être déduite de ce cadre de travail. Il s’agit de structurer la pensée mais pour aller plus loin et faciliter les traitements, il est nécessaire de définir un cadre légèrement plus contraint.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Aucune autre conclusion ne peut être déduite de ce cadre de travail. Il s’agit de structurer la pensée mais pour aller plus loin et faciliter les traitements, il est nécessaire de définir un cadre légèrement plus contraint.&lt;/p&gt;

&lt;h3 id=&quot;les-monoïdes&quot;&gt;Les monoïdes&lt;/h3&gt;

&lt;p&gt;Les monoïdes proviennent d’un terme allemand, mal-traduit, signifiant “Individu”.&lt;br /&gt;
Les monoïdes sont, comme toutes les structures algébriques, des magmas respectant des axiomes supplémentaires. Ces axiomes permettent de démontrer des propriétés qui peuvent s’avérer très utiles.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Recette miracle&lt;/b&gt;
&lt;b&gt;Pour créer un monoïde nous avons besoin d’un magma unifère et associatif.&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Unifère signifie que l’ensemble contient un élément neutre vis-à-vis de l’opération du magma. Cet élément neutre n’impacte pas le résultat si on réalise l’opération avec n’importe quel élément. &lt;code class=&quot;highlighter-rouge&quot;&gt;(n+0 = n et 0+m = m; 0 est un élément neutre pour l’opération '+' dans l’ensemble des entiers)&lt;/code&gt;.&lt;br /&gt;
Associatif signifie qu’une chaîne d’opération peut être réalisée dans n’importe quel ordre sans que le résultat s’en trouve modifié. &lt;code class=&quot;highlighter-rouge&quot;&gt;(a+b+c = (a+b)+c = a+(b+c); la somme est associative)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Associatif signifie qu’une chaîne d’opération peut être réalisée dans n’importe quel ordre sans que le résultat s’en trouve modifié. &lt;code class=&quot;highlighter-rouge&quot;&gt;(a+b+c = (a+b)+c = a+(b+c); la somme est associative)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Ces deux propriétés du monoïde permettent de démontrer une loi très intéressante pour les traitements informatiques : les calculs parallèles. Sans faire la démonstration, un exemple permet de s’imaginer cette propriété en utilisant le monoïde précédemment utilisé : l’ensemble des entiers munis de la somme.&lt;/p&gt;

&lt;p&gt;L’opération consiste à réaliser &lt;code class=&quot;highlighter-rouge&quot;&gt;1+2+3+4+5+6&lt;/code&gt;. L’associativité permet de réaliser les opérations sous la forme &lt;code class=&quot;highlighter-rouge&quot;&gt;(1+2)+(3+4)+(5+6) = 3+7+11 = 10+11 = 21&lt;/code&gt;. Pour réaliser les cinq opérations &lt;code class=&quot;highlighter-rouge&quot;&gt;(nombre de signes ‘+’)&lt;/code&gt;, trois séries de calculs ont été nécessaires &lt;code class=&quot;highlighter-rouge&quot;&gt;(nombre de '=')&lt;/code&gt; en parallélisant trois opérations dans la première étape. Cela est mathématiquement permis uniquement dans le cadre du monoïde.&lt;/p&gt;

&lt;h3 id=&quot;exemple--le-monoïde-derrière-le-magma-dhenri&quot;&gt;Exemple : Le Monoïde derrière le Magma d’Henri&lt;/h3&gt;

&lt;p&gt;Précédemment, Henri a créé un magma, il a également créé un monoïde sur l’ensemble CPH (Cailloux potentiels d’Henri).
Comment Henri a réussi à construire ce monoïde ?&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Associativité&lt;/b&gt;
Il faut démontrer l’associativité de l’opération stronger(), visuellement sur l’ensemble CH on peut le voir (effet miroir) :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/articles/front-end/algebraic-structure//img-1.jpg&quot; alt=&quot;image&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Il s’agit d’appliquer ces vérifications sur l’ensemble CPH. En mathématiques il est coutûme de démontrer par formulation que tout élément respecte l’associativité. Naïvement c’est possible (un élément à la fois). Cet ensemble est présent dans 2 autres ensembles : L’alphabet et les chiffres allant de 0 à 365.&lt;/p&gt;

&lt;p&gt;Il est possible de décomposer et se placer dans un ensemble commun :&lt;/p&gt;

&lt;p&gt;Il existe une étape intermédiaire : le calcul du poids. Le calcul du poids est un entiers allant de &lt;code class=&quot;highlighter-rouge&quot;&gt;0 à 9 125 (25 (Z)  * 365)&lt;/code&gt; . Nous appliquons ensuite une comparaison au maximum. 
Cette étape intermédiaire se place dans un sous-ensemble d’un ensemble très connu : les entiers naturels contenant 0. De plus, l’associativité des extremums (calcul maximum et minimum) a été démontrée sur cet ensemble.&lt;/p&gt;

&lt;p&gt;&lt;ins&gt;Unifère&lt;/ins&gt;&lt;/p&gt;

&lt;p&gt;Il faut prouver l’existence d’ un élément neutre. Selon les critères d’Henri le poids d’un cailloux est relatif à sa position dans l’alphabet puis agrégé au jour de l’année où Henri l’a trouvé (sauf exception en cas d’égalité : la lettre l’emporte). Cela veut dire que le poids minimum qui est de 0 (représenté par le cailloux potentiel d’Henri A000) est le cailloux le plus faible possible dans cet ensemble. 0 étant le nombre le plus petit des entiers naturels contenant 0, cela fait de lui un élément neutre dans le calcul du maximum :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Pour tout x dans N; tel que x &amp;gt;= 0 alors x&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Le classement est ingénieux, à quoi peuvent servir ces axiomes ?&lt;/p&gt;

&lt;p&gt;L’associativité permet de dire que peu importe le sens d’une opération elle aura le même résultat. Si on l’applique en première ou en dernière, rien ne change !&lt;br /&gt;
L’élément neutre permet de mettre en place une forme d’initialisation pour le cas où un jour Henri oublie de mettre le nom de tous ses cailloux dans son application par exemple.&lt;/p&gt;

&lt;p&gt;Henri aimerait vraiment que son application soit plus performante car il en a encore une centaine…. de milliers de cailloux à traiter.
&lt;br /&gt;&lt;br /&gt;
&lt;b&gt;L’application du plus fort Caillou v0.1.1&lt;/b&gt;&lt;/p&gt;
&lt;details&gt;
  &lt;p&gt;L’associativité permet de mettre en place du multi-threading.&lt;br /&gt;
L’élément neutre a un rôle d’initialisation/valeur par défaut.&lt;/p&gt;

  &lt;p&gt;Classiquement la mise en place d’une certaine parallélisation est enclin à de nombreux doutes. Pour continuer l’exemple, il faut mettre ces doutes de côté.&lt;/p&gt;

  &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stronger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cailloux&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputFormat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;[A-Z]([0-2][0-9][0-9]|3([0-5][0-9]|6[0-5]))&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;ToIntFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;letter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;charAt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;AtomicReference&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;atomicResult&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AtomicReference&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A000&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ForkJoinPool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aCaillou&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cailloux&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aCaillou&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)){&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;is not a Caillou&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;atomicResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weightResult&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;charAt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;substring&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weightACaillou&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aCaillou&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;charAt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aCaillou&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;substring&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weightResult&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weightACaillou&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weightACaillou&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weightResult&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;letter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;applyAsInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;letter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;applyAsInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aCaillou&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;atomicResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aCaillou&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;atomicResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;

  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Result : Y364
Time: 78 ms over 250000 iterations ; CPU usage (%): 4.438960808734625 %
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;

  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Avant : Y364
Time: 235 ms over 250000 iterations ; CPU usage (%): 4.438960808734625 %
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;

  &lt;p&gt;Voici le résultat avec la réflexion sur les monoïdes :&lt;/p&gt;

  &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Caillou&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;…&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Caillou&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;neutral&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Caillou&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;…&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Caillou&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;henrisCailloux&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputList&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parallelStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Caillou:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Caillou&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;neutral&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;Caillou:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stronger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;

  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Result: Optional[Caillou[letter=Y, dayOfYear=364]]
Time: 8 ms over 250000 iterations ; CPU usage (%): 4.438960808734625 %
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;

  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Avant : Optional[Caillou[letter=Y, dayOfYear=364]]
Time: 12 ms over 250000 iterations ; CPU usage (%): 4.438960808734625 %
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/details&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
Le monoïde permet d’apporter de nouvelles propriétés utiles pour une meilleure conception :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Une chaîne d’opération peut être parallélisée en garantissant le résultat&lt;/li&gt;
  &lt;li&gt;Une valeur par défaut peut être utilisée pour éviter les erreurs de traitement
Cette structure est la première à apporter des propriétés utiles aux conceptions en informatique. Il en existe beaucoup d’autres, plus ou moins complexes à identifier, pour obtenir divers avantages. Ainsi, en vérifiant des propriétés sur un ensemble et une opération, il est possible de déduire de nombreuses lois qui facilitent ou optimisent les traitements.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ce-quon-doit-en-retenir&quot;&gt;Ce qu’on doit en retenir&lt;/h3&gt;

&lt;p&gt;Bien sûr il ne faut pas forcément coder comme un grand mathématicien avec son tableau rempli de formule (quoique en dehors des formules ?).&lt;br /&gt;
Comme l’a dit un grand sage “apprendre à coder via des structures et seulement des structures est un comportement élitiste”.&lt;br /&gt;
Ce même grand sage a dit qu’il est préférable d’apprendre à les identifier.&lt;br /&gt;
Identifier leurs forces, leurs faiblesses, le contexte le plus adéquat à leur utilisation. Une fois qu’on arrive à les cerner, une porte s’ouvre vers une autre manière de développer des applications qualitatives.&lt;br /&gt;
La multitude de structures algébriques qui existent n’est pas exposée ici. Nous vous avons fait vivre les aventures d’Henri pour ouvrir une perspective sur ce monde et dans l’espoir que vous puissiez vous y faire votre propre avis.&lt;br /&gt;
Sans les mathématiques, tout est faisable, mais avec les mathématiques, tout est structuré.&lt;/p&gt;

&lt;h3 id=&quot;sources-&quot;&gt;Sources :&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;https://blog.derniercri.io/observons-une-premiere-structure-algebrique-appliquee-a-linformatique-le-monoide/&lt;/li&gt;
  &lt;li&gt;https://fr.wikipedia.org/wiki/Th%C3%A9orie_des_cat%C3%A9gories#Morphismes - Xavier Van de Woestyne&lt;/li&gt;
  &lt;li&gt;Thomas Haesslé - Cours et discussions (https://oteku.github.io/)&lt;/li&gt;
  &lt;li&gt;Lambda Lille - conférences (https://twitter.com/lambdalille)&lt;/li&gt;
  &lt;li&gt;https://www.youtube.com/watch?v=RaqlxOihGxw&amp;amp;list=PLNefH6S6myiMFlgsEIGHb8KZaLKE2eAZQ - micmaths&lt;/li&gt;
  &lt;li&gt;https://fr.wikipedia.org/wiki/Th%C3%A9orie_des_cat%C3%A9gories#Morphismes&lt;/li&gt;
  &lt;li&gt;https://fr.wikipedia.org/wiki/Structure_alg%C3%A9brique&lt;/li&gt;
&lt;/ul&gt;</content><author><name>[&quot;florian_barbet&quot;]</name></author><category term="Front-End" /><summary type="html">Les premiers algorithmes ont été réalisés bien avant que le premier ordinateur ne soit conceptualisé. Le tout premier algorithme connu a été écrit en -300 avant notre ère par Euclide (PGCD). Aujourd’hui les mathématiques font rêver, font peur et semblent parfois inaccessibles. Une chose est sûre, elles sont partout. Comptables, développeurs, boulangers ou même politiques, tous utilisent les mathématiques : le langage suit un ensemble de règles mathématiques. Les structures du langage sont réalisées par l’application d’un arbre de la syntaxe abstraite. Les structures algébriques font partie des bases des mathématiques. C’est un socle sur lequel de nombreuses règles sont construites. En particulier, pour réaliser des applications robustes, performantes et maintenables. Elles peuvent apporter une aide précieuse.</summary></entry><entry><title type="html">Micro Front End</title><link href="/articles/front-end/micro-front-end/" rel="alternate" type="text/html" title="Micro Front End" /><published>2022-03-02T01:00:00-06:00</published><updated>2022-03-02T01:00:00-06:00</updated><id>/articles/front-end/micro-front-end</id><content type="html" xml:base="/articles/front-end/micro-front-end/">&lt;p&gt;Inspiré par les architectures microservices Back-End, le principe du micro-front end se résume en une agrégation de composants web « isolées ».&lt;br /&gt;
Voyez la page finale comme un puzzle où chaque morceau serait un composant MFE.
Ces composants peuvent être une barre de navigation, un bouton ou tout simplement un texte. Cette découpe apporte en quelque sorte de la “liberté”.&lt;br /&gt;
Ce type d’architecture permet de choisir son framework Front, d’être autonome sur sa livraison et de séparer les projets par équipes au lieu de travailler sur un monolith commun.
Le but du MFE est de simplifier la gestion, la maintenabilité, la conception et le découpage des interfaces utilisateurs.&lt;br /&gt;
Garantir le bon fonctionnement de la page Web finale demandera de la rigueur et un travail commun.&lt;br /&gt;
Il existe une multitude de façon de faire du micro-front end notamment en utilisant des technologies HTML (Iframe) ou un agrégateur en Back End (type Node Js, Java etc..)…
&lt;!--END_SUMMARY--&gt;&lt;/p&gt;

&lt;h5 id=&quot;origine&quot;&gt;Origine&lt;/h5&gt;

&lt;p&gt;&lt;img src=&quot;/articles/front-end/micro-front-end//image_1.jpg&quot; alt=&quot;image&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Le terme est apparu dans les RADAR techniques de Thoughtworks en 2016 mais c’est en 2019 que les micro-front end commencent à émerger.&lt;/p&gt;

&lt;h4 id=&quot;thoughtworks--qui-sont-ils-&quot;&gt;Thoughtworks : qui sont-ils ?&lt;/h4&gt;

&lt;p&gt;C’est un organisme public qui se concentre sur la mise en place de concept technologique.&lt;br /&gt;
Ils mettent à disposition la conception et participe à la livraison de logiciels, d’outils, ils proposent également un service de conseil informatique.&lt;/p&gt;

&lt;h4 id=&quot;que-sest-il-passé-entre-lapparition-du-terme-et-sa-réelle-émergence-&quot;&gt;Que s’est-il passé entre l’apparition du terme et sa réelle émergence ?&lt;/h4&gt;

&lt;p&gt;Thoughtworks a mis à disposition une recherche réalisée dans leurs équipes. Cette recherche porte sur la mise en place des micro-services au niveau de l’UI. Thoughtworks a partagé l’évolution conceptuelle des micro-front end. En Novembre 2016, arrivent les premières idées à propos de ce type d’architecture (des idées mais aussi des POC et des phases d’évaluation). &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Les ingénieurs de Thoughtworks pensent qu’il serait intéressant d’appliquer un système de micro-services au niveau de l’UI afin d’éviter les monolithes. Ils mettent en avant le fait que l’approche BFF (back-for-front : couche permettant la communication entre le back-end et le front-end) en serait largement bénéficiaire.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;S’ensuit une communication en Mai 2018 (lors de la phase d’essai), celle-ci nous informe que des équipes ont mis en place des structures monolithiques au niveau des services back. Ils font un petit rappel afin d’expliquer l’objectif des micro-front end : obtenir des composants/pages isolés et indépendants les uns des autres et qui appartiennent à différentes équipes.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;En Avril 2019 débute la phase d’émergence, à ce stade, Thoughtworks pense que la mise en place des micro-front end représente un bénéfice certain pour les équipes de développement. A partir de ce moment ils commencent à informer et à conseiller sur les implémentations liées aux micro-front end.&lt;/p&gt;

&lt;h4 id=&quot;et-si-jai-rien-compris--petit-résumé&quot;&gt;“Et si j’ai rien compris ?”: Petit Résumé&lt;/h4&gt;

&lt;p&gt;Le processus lié à ce concept, dans un format de type release/actualisation semble venir de la frustration de certaines équipes vis-à-vis des monolithes.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Les “assessments” donne pour définition des structures monolithiques Front : « large and sprawling browser applications that are as difficult to maintain and evolve as the monolithic server-side applications we’ve abandoned »&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Soit en français : « Des applications “navigateurs” volumineuses et entremêlées étant aussi difficiles à maintenir et à faire évoluer que des applications back monolithiques déjà  abandonnées. »&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;mise-en-place&quot;&gt;Mise en place&lt;/h4&gt;

&lt;h5 id=&quot;--la-gouvernance&quot;&gt;- La Gouvernance&lt;/h5&gt;

&lt;p&gt;La gouvernance est un élément indispensable lors de l’initialisation d’un projet micro-front end. La liberté provenant de ce type d’architecture est à double tranchant. Une plus grande liberté permet de réaliser plus facilement un ensemble de tâches mais c’est aussi un moyen de surcharger votre application.&lt;/p&gt;

&lt;p&gt;Voici 3 axes de réflexions afin de mieux comprendre la problématique :&lt;/p&gt;

&lt;h5 id=&quot;--le-premier--déterminer-le-scope&quot;&gt;- Le premier : déterminer le scope&lt;/h5&gt;

&lt;p&gt;Réfléchissez à la taille de vos composants (comme ce qui est fait pour les briques dans un modèle microservice en back-end). Cela permet ainsi de réfléchir à la taille de vos équipes et le nombre de ressources à mobiliser. (Votre budget vous remerciera.)&lt;/p&gt;

&lt;h5 id=&quot;--le-second--il-en-faut-un-pour-les-gouverner-tous&quot;&gt;- Le second : il en faut un pour les gouverner tous.&lt;/h5&gt;

&lt;p&gt;L’indépendance des composants peut faire perdre de vue l’objectif commun: la réalisation d’une interface graphique pour une application. Cette application a des attentes en termes d’objectifs, de performances, ou encore d’image (marketing etc…).&lt;br /&gt;
Il faut, par exemple, veiller à avoir une équipe responsable du partage de la connaissance et de la culture afin de ne pas diviser “pour mieux régner” mais plutôt de “réunir pour mieux réussir”. Il est également important d’imaginer la mise en place de tests d’intégrations globaux au niveau du plus haut parent de la famille des composants.&lt;br /&gt;
(Imaginez une application dont chaque composant possède sa propre charte graphique façon sapin de noël..)&lt;/p&gt;

&lt;p&gt;Une solution commune dite “Core” se matérialise par une équipe gérant le noyau du site, elle régit les librairies de bases, la création, la gestion des outils (e.g.. Eventbus), la charte graphique etc.&lt;br /&gt;
Les composants “enfants” hériteront de tout ce qui aura été prévu et partagé par le noyau applicatif.&lt;/p&gt;

&lt;h5 id=&quot;--la-troisième--comment-bien-séquiper-pour-la-performance-&quot;&gt;- La troisième : comment bien s’équiper pour la performance ?&lt;/h5&gt;

&lt;p&gt;Il faut distinguer deux aspects lorsque l’on pense à la qualité des MFE : la performance de chacun d’entre eux mais également du site global en termes d’affichage et de rendu.
Avoir de multiples composants, c’est accepter d’avoir un possible laps de temps au moment de la création/initialisation de chacun.&lt;br /&gt;
Il faut également penser au démarrage et à l’intégration de nouveaux MFE dans l’architecture globale, que ce soit en termes de cohérence, de qualité de code, de sécurité, de chaîne d’intégration et de déploiement.&lt;br /&gt;
Pour éviter cela, il faut mettre en relation des experts techniques (architectes, leader, etc.) capables de trouver des solutions performantes et de partager les bonnes pratiques à tous ces différents niveaux.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Point d’attention : le runtime&lt;/b&gt;&lt;br /&gt;
Plus il y a de frameworks, plus il y aura de runtimes et donc plus de risques que le poids de la page soit augmenté et sa performance dégradée.&lt;br /&gt;
Il faudra limiter la diversité des frameworks utilisés.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/articles/front-end/micro-front-end//image_2.jpg&quot; alt=&quot;image&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Ce graphique montre la consommation en runtime pour chaque build avec le runtime Svelte. On dénote qu’avec à peine 10 composants on consomme moins qu’un Angular pour ne citer que lui.&lt;/p&gt;

&lt;h5 id=&quot;que-doit-on-retenir-&quot;&gt;Que doit-on retenir ?&lt;/h5&gt;

&lt;p&gt;Pour résumer en un seul mot :  “Communiquez !”&lt;br /&gt;
L’indépendance apportée par les MFE peut desservir, chaque équipe faisant ses composants de manière “isolée”, si personne ne s’assure de la cohérence globale cela peut rapidement devenir néfaste.&lt;br /&gt;
Sans communication et gouvernance, la page finale peut vite se retrouver alourdie (du au fait d’un ensemble de technologies mélangées et de la multiplicité des frameworks utilisés) ou chartée de façon bien différente et donc perdre de la cohérence (notamment via le design).&lt;br /&gt;
Tous ces risques peuvent vite amener à regretter les monolithes.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Schéma d’archi&lt;br /&gt;&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Voici un exemple qui schématise une architecture micro front avec trois MFE.
Chaque composant est développé avec une techno différente (Vue, Angular, React) et géré par une équipe spécifique, possédant ses outils de CI/CD, de tests, etc.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/articles/front-end/micro-front-end//image_3.jpg&quot; alt=&quot;image&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h5 id=&quot;framework-technos-et-outils&quot;&gt;Framework, technos et outils&lt;/h5&gt;

&lt;p&gt;Une pluralité de frameworks qui vont vous faciliter le développement des micro frontend est disponible : chacun a sa propre philosophie dans la manière d’aborder les concepts liés aux micro frontend.&lt;br /&gt;
Parmi les plus connus on peut citer Single-spa, Bit, Qiankun, Open components …&lt;/p&gt;

&lt;h5 id=&quot;proscons&quot;&gt;Pros/Cons&lt;/h5&gt;
&lt;p&gt;De grandes entreprises ont choisi de se lancer dans les micro frontend, comme IKEA sur son magasin en ligne, Spotify avec son application desktop ou encore Leroy Merlin avec son site Web et Kobi.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Pour chacune de ces applications, des bénéfices se sont rapidement fait sentir, par exemple à travers leur vie dans les différentes plateformes, à travers l’expérience de l’utilisateur ou encore sur une meilleure réalisation des développements grâce à des équipes plus réduite mais concentrées sur une seule feature.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Les avantages et inconvénients des MFE sont fortement liés.&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Le découpage du code&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;b&gt;Pros&lt;/b&gt; : plus simple, plus léger, c’est un vrai bonus de lisibilité et de maintenabilité.&lt;/li&gt;
  &lt;li&gt;&lt;b&gt;Cons&lt;/b&gt; : même si la compréhension unitaire des composants est plus simple, la complexité globale de l’application peut en revanche être plus floue.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;La liberté des choix technologiques&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;b&gt;Pros&lt;/b&gt; : plus de technologies disponibles implique plus de possibilités.&lt;/li&gt;
  &lt;li&gt;&lt;b&gt;Cons&lt;/b&gt; : cela peut induire des problèmes de performances, de compatibilité voire de maintenabilité.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;L’indépendance et l’autonomie des équipes&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;b&gt;Pros&lt;/b&gt; : cet aspect améliore les conditions et la qualité de développement.&lt;/li&gt;
  &lt;li&gt;&lt;b&gt;Cons&lt;/b&gt; : la relation inter-équipes ne doit pas être négligée. Le risque étant de s’éloigner de l’objectif principal, d’avoir des demandes de refontes (e.g : ne correspond pas à l’attente des composants consommateurs) et même des migrations d’outils.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;L’indépendance des livraisons&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;b&gt;Pros&lt;/b&gt; : le choix des outils d’intégration et de déploiement continue est possible. Cela permet de livrer uniquement certaines parties de l’application.&lt;/li&gt;
  &lt;li&gt;&lt;b&gt;Cons&lt;/b&gt; : mais cela implique une gestion de la qualité, du release management ou software delivery global plus complexe à mettre en place.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Il est nécessaire de mettre en place une gouvernance forte pour garantir une cohérence dans les choix pris lors du développement des différents composants. (Objectif : assurer une qualité et maintenabilité globale).&lt;/p&gt;

&lt;p&gt;Links : https://www.infoq.com/news/2019/04/real-world-framework-benchmark/&lt;/p&gt;</content><author><name>[&quot;yohann_gueguin&quot;, &quot;florian_barbet&quot;, &quot;laurent_duchaussoy&quot;]</name></author><category term="Front-End" /><summary type="html">Inspiré par les architectures microservices Back-End, le principe du micro-front end se résume en une agrégation de composants web « isolées ». Voyez la page finale comme un puzzle où chaque morceau serait un composant MFE. Ces composants peuvent être une barre de navigation, un bouton ou tout simplement un texte. Cette découpe apporte en quelque sorte de la “liberté”. Ce type d’architecture permet de choisir son framework Front, d’être autonome sur sa livraison et de séparer les projets par équipes au lieu de travailler sur un monolith commun. Le but du MFE est de simplifier la gestion, la maintenabilité, la conception et le découpage des interfaces utilisateurs. Garantir le bon fonctionnement de la page Web finale demandera de la rigueur et un travail commun. Il existe une multitude de façon de faire du micro-front end notamment en utilisant des technologies HTML (Iframe) ou un agrégateur en Back End (type Node Js, Java etc..)…</summary></entry></feed>